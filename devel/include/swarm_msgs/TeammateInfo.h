// Generated by gencpp from file swarm_msgs/TeammateInfo.msg
// DO NOT EDIT!


#ifndef SWARM_MSGS_MESSAGE_TEAMMATEINFO_H
#define SWARM_MSGS_MESSAGE_TEAMMATEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swarm_msgs
{
template <class ContainerAllocator>
struct TeammateInfo_
{
  typedef TeammateInfo_<ContainerAllocator> Type;

  TeammateInfo_()
    : is_connect(false)
    , id(0)
    , ip()  {
      ip.assign(0);
  }
  TeammateInfo_(const ContainerAllocator& _alloc)
    : is_connect(false)
    , id(0)
    , ip()  {
  (void)_alloc;
      ip.assign(0);
  }



   typedef uint8_t _is_connect_type;
  _is_connect_type is_connect;

   typedef uint8_t _id_type;
  _id_type id;

   typedef boost::array<uint8_t, 4>  _ip_type;
  _ip_type ip;





  typedef boost::shared_ptr< ::swarm_msgs::TeammateInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_msgs::TeammateInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TeammateInfo_

typedef ::swarm_msgs::TeammateInfo_<std::allocator<void> > TeammateInfo;

typedef boost::shared_ptr< ::swarm_msgs::TeammateInfo > TeammateInfoPtr;
typedef boost::shared_ptr< ::swarm_msgs::TeammateInfo const> TeammateInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_msgs::TeammateInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_msgs::TeammateInfo_<ContainerAllocator1> & lhs, const ::swarm_msgs::TeammateInfo_<ContainerAllocator2> & rhs)
{
  return lhs.is_connect == rhs.is_connect &&
    lhs.id == rhs.id &&
    lhs.ip == rhs.ip;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_msgs::TeammateInfo_<ContainerAllocator1> & lhs, const ::swarm_msgs::TeammateInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::TeammateInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::TeammateInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::TeammateInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56988bb506b9d5644a48ab398ffc0930";
  }

  static const char* value(const ::swarm_msgs::TeammateInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56988bb506b9d564ULL;
  static const uint64_t static_value2 = 0x4a48ab398ffc0930ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_msgs/TeammateInfo";
  }

  static const char* value(const ::swarm_msgs::TeammateInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# teammate info\n"
"bool is_connect\n"
"uint8 id\n"
"uint8[4] ip\n"
"\n"
;
  }

  static const char* value(const ::swarm_msgs::TeammateInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_connect);
      stream.next(m.id);
      stream.next(m.ip);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TeammateInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_msgs::TeammateInfo_<ContainerAllocator>& v)
  {
    s << indent << "is_connect: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_connect);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "ip[]" << std::endl;
    for (size_t i = 0; i < v.ip.size(); ++i)
    {
      s << indent << "  ip[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.ip[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_MSGS_MESSAGE_TEAMMATEINFO_H
