// Generated by gencpp from file swarm_msgs/TeamStatus.msg
// DO NOT EDIT!


#ifndef SWARM_MSGS_MESSAGE_TEAMSTATUS_H
#define SWARM_MSGS_MESSAGE_TEAMSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <swarm_msgs/TeammateInfo.h>

namespace swarm_msgs
{
template <class ContainerAllocator>
struct TeamStatus_
{
  typedef TeamStatus_<ContainerAllocator> Type;

  TeamStatus_()
    : my_drone_id(0)
    , teammate_info()  {
    }
  TeamStatus_(const ContainerAllocator& _alloc)
    : my_drone_id(0)
    , teammate_info(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _my_drone_id_type;
  _my_drone_id_type my_drone_id;

   typedef std::vector< ::swarm_msgs::TeammateInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >> _teammate_info_type;
  _teammate_info_type teammate_info;





  typedef boost::shared_ptr< ::swarm_msgs::TeamStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_msgs::TeamStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TeamStatus_

typedef ::swarm_msgs::TeamStatus_<std::allocator<void> > TeamStatus;

typedef boost::shared_ptr< ::swarm_msgs::TeamStatus > TeamStatusPtr;
typedef boost::shared_ptr< ::swarm_msgs::TeamStatus const> TeamStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_msgs::TeamStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_msgs::TeamStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_msgs::TeamStatus_<ContainerAllocator1> & lhs, const ::swarm_msgs::TeamStatus_<ContainerAllocator2> & rhs)
{
  return lhs.my_drone_id == rhs.my_drone_id &&
    lhs.teammate_info == rhs.teammate_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_msgs::TeamStatus_<ContainerAllocator1> & lhs, const ::swarm_msgs::TeamStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::TeamStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::TeamStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::TeamStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::TeamStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::TeamStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::TeamStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_msgs::TeamStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73da6a2eee2932c533bd709d771dd1f5";
  }

  static const char* value(const ::swarm_msgs::TeamStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73da6a2eee2932c5ULL;
  static const uint64_t static_value2 = 0x33bd709d771dd1f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_msgs::TeamStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_msgs/TeamStatus";
  }

  static const char* value(const ::swarm_msgs::TeamStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_msgs::TeamStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Team\n"
"uint8 my_drone_id\n"
"TeammateInfo[] teammate_info\n"
"\n"
"================================================================================\n"
"MSG: swarm_msgs/TeammateInfo\n"
"# teammate info\n"
"bool is_connect\n"
"uint8 id\n"
"uint8[4] ip\n"
"\n"
;
  }

  static const char* value(const ::swarm_msgs::TeamStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_msgs::TeamStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.my_drone_id);
      stream.next(m.teammate_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TeamStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_msgs::TeamStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_msgs::TeamStatus_<ContainerAllocator>& v)
  {
    s << indent << "my_drone_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.my_drone_id);
    s << indent << "teammate_info[]" << std::endl;
    for (size_t i = 0; i < v.teammate_info.size(); ++i)
    {
      s << indent << "  teammate_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::swarm_msgs::TeammateInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.teammate_info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_MSGS_MESSAGE_TEAMSTATUS_H
