// Generated by gencpp from file swarm_msgs/ObserveTeammate.msg
// DO NOT EDIT!


#ifndef SWARM_MSGS_MESSAGE_OBSERVETEAMMATE_H
#define SWARM_MSGS_MESSAGE_OBSERVETEAMMATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swarm_msgs
{
template <class ContainerAllocator>
struct ObserveTeammate_
{
  typedef ObserveTeammate_<ContainerAllocator> Type;

  ObserveTeammate_()
    : is_observe(false)
    , teammate_id(0)
    , observed_pos()  {
      observed_pos.assign(0.0);
  }
  ObserveTeammate_(const ContainerAllocator& _alloc)
    : is_observe(false)
    , teammate_id(0)
    , observed_pos()  {
  (void)_alloc;
      observed_pos.assign(0.0);
  }



   typedef uint8_t _is_observe_type;
  _is_observe_type is_observe;

   typedef uint8_t _teammate_id_type;
  _teammate_id_type teammate_id;

   typedef boost::array<double, 3>  _observed_pos_type;
  _observed_pos_type observed_pos;





  typedef boost::shared_ptr< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> const> ConstPtr;

}; // struct ObserveTeammate_

typedef ::swarm_msgs::ObserveTeammate_<std::allocator<void> > ObserveTeammate;

typedef boost::shared_ptr< ::swarm_msgs::ObserveTeammate > ObserveTeammatePtr;
typedef boost::shared_ptr< ::swarm_msgs::ObserveTeammate const> ObserveTeammateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_msgs::ObserveTeammate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_msgs::ObserveTeammate_<ContainerAllocator1> & lhs, const ::swarm_msgs::ObserveTeammate_<ContainerAllocator2> & rhs)
{
  return lhs.is_observe == rhs.is_observe &&
    lhs.teammate_id == rhs.teammate_id &&
    lhs.observed_pos == rhs.observed_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_msgs::ObserveTeammate_<ContainerAllocator1> & lhs, const ::swarm_msgs::ObserveTeammate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee10052e28e277b9de819f4024962672";
  }

  static const char* value(const ::swarm_msgs::ObserveTeammate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee10052e28e277b9ULL;
  static const uint64_t static_value2 = 0xde819f4024962672ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_msgs/ObserveTeammate";
  }

  static const char* value(const ::swarm_msgs::ObserveTeammate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ObserveTeammate.msg\n"
"bool is_observe # Observe teammate?\n"
"uint8 teammate_id # The drone_id of observed teammate\n"
"float64[3] observed_pos  # The position of the observed teammate in my body frame\n"
;
  }

  static const char* value(const ::swarm_msgs::ObserveTeammate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_observe);
      stream.next(m.teammate_id);
      stream.next(m.observed_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObserveTeammate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_msgs::ObserveTeammate_<ContainerAllocator>& v)
  {
    s << indent << "is_observe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_observe);
    s << indent << "teammate_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.teammate_id);
    s << indent << "observed_pos[]" << std::endl;
    for (size_t i = 0; i < v.observed_pos.size(); ++i)
    {
      s << indent << "  observed_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.observed_pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_MSGS_MESSAGE_OBSERVETEAMMATE_H
