// Generated by gencpp from file swarm_msgs/QuadStatePub.msg
// DO NOT EDIT!


#ifndef SWARM_MSGS_MESSAGE_QUADSTATEPUB_H
#define SWARM_MSGS_MESSAGE_QUADSTATEPUB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <swarm_msgs/ObserveTeammate.h>

namespace swarm_msgs
{
template <class ContainerAllocator>
struct QuadStatePub_
{
  typedef QuadStatePub_<ContainerAllocator> Type;

  QuadStatePub_()
    : header()
    , child_frame_id()
    , drone_id(0)
    , pose()
    , gyr()
    , vel()
    , teammate()  {
      gyr.assign(0.0);

      vel.assign(0.0);
  }
  QuadStatePub_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , drone_id(0)
    , pose(_alloc)
    , gyr()
    , vel()
    , teammate(_alloc)  {
  (void)_alloc;
      gyr.assign(0.0);

      vel.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef uint8_t _drone_id_type;
  _drone_id_type drone_id;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef boost::array<double, 3>  _gyr_type;
  _gyr_type gyr;

   typedef boost::array<double, 3>  _vel_type;
  _vel_type vel;

   typedef std::vector< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >> _teammate_type;
  _teammate_type teammate;





  typedef boost::shared_ptr< ::swarm_msgs::QuadStatePub_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_msgs::QuadStatePub_<ContainerAllocator> const> ConstPtr;

}; // struct QuadStatePub_

typedef ::swarm_msgs::QuadStatePub_<std::allocator<void> > QuadStatePub;

typedef boost::shared_ptr< ::swarm_msgs::QuadStatePub > QuadStatePubPtr;
typedef boost::shared_ptr< ::swarm_msgs::QuadStatePub const> QuadStatePubConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_msgs::QuadStatePub_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_msgs::QuadStatePub_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_msgs::QuadStatePub_<ContainerAllocator1> & lhs, const ::swarm_msgs::QuadStatePub_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.child_frame_id == rhs.child_frame_id &&
    lhs.drone_id == rhs.drone_id &&
    lhs.pose == rhs.pose &&
    lhs.gyr == rhs.gyr &&
    lhs.vel == rhs.vel &&
    lhs.teammate == rhs.teammate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_msgs::QuadStatePub_<ContainerAllocator1> & lhs, const ::swarm_msgs::QuadStatePub_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::QuadStatePub_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::QuadStatePub_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::QuadStatePub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::QuadStatePub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::QuadStatePub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::QuadStatePub_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_msgs::QuadStatePub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65d59f5da6457206c68b9bc124d5df51";
  }

  static const char* value(const ::swarm_msgs::QuadStatePub_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65d59f5da6457206ULL;
  static const uint64_t static_value2 = 0xc68b9bc124d5df51ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_msgs::QuadStatePub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_msgs/QuadStatePub";
  }

  static const char* value(const ::swarm_msgs::QuadStatePub_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_msgs::QuadStatePub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# QuadStatePub.msg\n"
"\n"
"Header header\n"
"string child_frame_id\n"
"uint8 drone_id                        # My drone id\n"
"geometry_msgs/PoseWithCovariance pose # My pose and corresponding covariance in my world frame\n"
"float64[3] gyr                        # the unbiased angular velocity (body frame) of the body origin\n"
"float64[3] vel                        # the estimated velocity (global frame) of the body origin\n"
"ObserveTeammate[] teammate            # Teammates' states observed by me\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: swarm_msgs/ObserveTeammate\n"
"# ObserveTeammate.msg\n"
"bool is_observe # Observe teammate?\n"
"uint8 teammate_id # The drone_id of observed teammate\n"
"float64[3] observed_pos  # The position of the observed teammate in my body frame\n"
;
  }

  static const char* value(const ::swarm_msgs::QuadStatePub_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_msgs::QuadStatePub_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.drone_id);
      stream.next(m.pose);
      stream.next(m.gyr);
      stream.next(m.vel);
      stream.next(m.teammate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QuadStatePub_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_msgs::QuadStatePub_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_msgs::QuadStatePub_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "drone_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "gyr[]" << std::endl;
    for (size_t i = 0; i < v.gyr.size(); ++i)
    {
      s << indent << "  gyr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gyr[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "teammate[]" << std::endl;
    for (size_t i = 0; i < v.teammate.size(); ++i)
    {
      s << indent << "  teammate[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::swarm_msgs::ObserveTeammate_<ContainerAllocator> >::stream(s, indent + "    ", v.teammate[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_MSGS_MESSAGE_QUADSTATEPUB_H
