// Generated by gencpp from file swarm_msgs/GlobalExtrinsic.msg
// DO NOT EDIT!


#ifndef SWARM_MSGS_MESSAGE_GLOBALEXTRINSIC_H
#define SWARM_MSGS_MESSAGE_GLOBALEXTRINSIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swarm_msgs
{
template <class ContainerAllocator>
struct GlobalExtrinsic_
{
  typedef GlobalExtrinsic_<ContainerAllocator> Type;

  GlobalExtrinsic_()
    : teammate_id(0)
    , rot_deg()
    , trans()  {
      rot_deg.assign(0.0);

      trans.assign(0.0);
  }
  GlobalExtrinsic_(const ContainerAllocator& _alloc)
    : teammate_id(0)
    , rot_deg()
    , trans()  {
  (void)_alloc;
      rot_deg.assign(0.0);

      trans.assign(0.0);
  }



   typedef uint8_t _teammate_id_type;
  _teammate_id_type teammate_id;

   typedef boost::array<float, 3>  _rot_deg_type;
  _rot_deg_type rot_deg;

   typedef boost::array<float, 3>  _trans_type;
  _trans_type trans;





  typedef boost::shared_ptr< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalExtrinsic_

typedef ::swarm_msgs::GlobalExtrinsic_<std::allocator<void> > GlobalExtrinsic;

typedef boost::shared_ptr< ::swarm_msgs::GlobalExtrinsic > GlobalExtrinsicPtr;
typedef boost::shared_ptr< ::swarm_msgs::GlobalExtrinsic const> GlobalExtrinsicConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator1> & lhs, const ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator2> & rhs)
{
  return lhs.teammate_id == rhs.teammate_id &&
    lhs.rot_deg == rhs.rot_deg &&
    lhs.trans == rhs.trans;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator1> & lhs, const ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a76ac5934d5f766451f12a662f47943";
  }

  static const char* value(const ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a76ac5934d5f766ULL;
  static const uint64_t static_value2 = 0x451f12a662f47943ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_msgs/GlobalExtrinsic";
  }

  static const char* value(const ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# GlobalExtrinsic.msg\n"
"uint8 teammate_id # The drone_id of teammates\n"
"float32[3] rot_deg\n"
"float32[3] trans\n"
;
  }

  static const char* value(const ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.teammate_id);
      stream.next(m.rot_deg);
      stream.next(m.trans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalExtrinsic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_msgs::GlobalExtrinsic_<ContainerAllocator>& v)
  {
    s << indent << "teammate_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.teammate_id);
    s << indent << "rot_deg[]" << std::endl;
    for (size_t i = 0; i < v.rot_deg.size(); ++i)
    {
      s << indent << "  rot_deg[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rot_deg[i]);
    }
    s << indent << "trans[]" << std::endl;
    for (size_t i = 0; i < v.trans.size(); ++i)
    {
      s << indent << "  trans[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trans[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_MSGS_MESSAGE_GLOBALEXTRINSIC_H
