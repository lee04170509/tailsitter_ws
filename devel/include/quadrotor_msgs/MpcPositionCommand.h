// Generated by gencpp from file quadrotor_msgs/MpcPositionCommand.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_MPCPOSITIONCOMMAND_H
#define QUADROTOR_MSGS_MESSAGE_MPCPOSITIONCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <quadrotor_msgs/PositionCommand.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct MpcPositionCommand_
{
  typedef MpcPositionCommand_<ContainerAllocator> Type;

  MpcPositionCommand_()
    : header()
    , cmds()
    , mpc_horizon(0)  {
    }
  MpcPositionCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cmds(_alloc)
    , mpc_horizon(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::quadrotor_msgs::PositionCommand_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::quadrotor_msgs::PositionCommand_<ContainerAllocator> >> _cmds_type;
  _cmds_type cmds;

   typedef uint32_t _mpc_horizon_type;
  _mpc_horizon_type mpc_horizon;





  typedef boost::shared_ptr< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> const> ConstPtr;

}; // struct MpcPositionCommand_

typedef ::quadrotor_msgs::MpcPositionCommand_<std::allocator<void> > MpcPositionCommand;

typedef boost::shared_ptr< ::quadrotor_msgs::MpcPositionCommand > MpcPositionCommandPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::MpcPositionCommand const> MpcPositionCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cmds == rhs.cmds &&
    lhs.mpc_horizon == rhs.mpc_horizon;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a72f7a7a678d7a5d422b50d1b2b4f694";
  }

  static const char* value(const ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa72f7a7a678d7a5dULL;
  static const uint64_t static_value2 = 0x422b50d1b2b4f694ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/MpcPositionCommand";
  }

  static const char* value(const ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"quadrotor_msgs/PositionCommand[] cmds\n"
"uint32 mpc_horizon\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/PositionCommand\n"
"Header header\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration\n"
"geometry_msgs/Vector3 jerk\n"
"geometry_msgs/Vector3 angular_velocity\n"
"geometry_msgs/Vector3 attitude\n"
"geometry_msgs/Vector3 thrust\n"
"float64 yaw\n"
"float64 yaw_dot\n"
"float64 vel_norm\n"
"float64 acc_norm\n"
"\n"
"\n"
"float64[3] kx\n"
"float64[3] kv\n"
"uint32 trajectory_id\n"
"uint8 TRAJECTORY_STATUS_EMPTY = 0\n"
"uint8 TRAJECTORY_STATUS_EMER = 2\n"
"uint8 TRAJECTORY_STATUS_READY = 1\n"
"uint8 TRAJECTORY_STATUS_COMPLETED = 3\n"
"uint8 TRAJECTROY_STATUS_ABORT = 4\n"
"uint8 TRAJECTORY_STATUS_ILLEGAL_START = 5\n"
"uint8 TRAJECTORY_STATUS_ILLEGAL_FINAL = 6\n"
"uint8 TRAJECTORY_STATUS_IMPOSSIBLE = 7\n"
"uint32 ACTION_STOP                 =   8\n"
"# Its ID number will start from 1, allowing you comparing it with 0.\n"
"uint8 trajectory_flag\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cmds);
      stream.next(m.mpc_horizon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MpcPositionCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::MpcPositionCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cmds[]" << std::endl;
    for (size_t i = 0; i < v.cmds.size(); ++i)
    {
      s << indent << "  cmds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quadrotor_msgs::PositionCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.cmds[i]);
    }
    s << indent << "mpc_horizon: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.mpc_horizon);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_MPCPOSITIONCOMMAND_H
