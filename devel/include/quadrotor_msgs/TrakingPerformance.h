// Generated by gencpp from file quadrotor_msgs/TrakingPerformance.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_TRAKINGPERFORMANCE_H
#define QUADROTOR_MSGS_MESSAGE_TRAKINGPERFORMANCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Int64.h>
#include <quadrotor_msgs/QuadrotorState.h>
#include <quadrotor_msgs/QuadrotorState.h>
#include <quadrotor_msgs/QuadrotorState.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct TrakingPerformance_
{
  typedef TrakingPerformance_<ContainerAllocator> Type;

  TrakingPerformance_()
    : header()
    , fsm_state()
    , mpc_solve_time(0.0)
    , desire()
    , feedback()
    , error()  {
    }
  TrakingPerformance_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fsm_state(_alloc)
    , mpc_solve_time(0.0)
    , desire(_alloc)
    , feedback(_alloc)
    , error(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Int64_<ContainerAllocator>  _fsm_state_type;
  _fsm_state_type fsm_state;

   typedef double _mpc_solve_time_type;
  _mpc_solve_time_type mpc_solve_time;

   typedef  ::quadrotor_msgs::QuadrotorState_<ContainerAllocator>  _desire_type;
  _desire_type desire;

   typedef  ::quadrotor_msgs::QuadrotorState_<ContainerAllocator>  _feedback_type;
  _feedback_type feedback;

   typedef  ::quadrotor_msgs::QuadrotorState_<ContainerAllocator>  _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> const> ConstPtr;

}; // struct TrakingPerformance_

typedef ::quadrotor_msgs::TrakingPerformance_<std::allocator<void> > TrakingPerformance;

typedef boost::shared_ptr< ::quadrotor_msgs::TrakingPerformance > TrakingPerformancePtr;
typedef boost::shared_ptr< ::quadrotor_msgs::TrakingPerformance const> TrakingPerformanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fsm_state == rhs.fsm_state &&
    lhs.mpc_solve_time == rhs.mpc_solve_time &&
    lhs.desire == rhs.desire &&
    lhs.feedback == rhs.feedback &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91224dc465a6f21d706763bf5df5f87e";
  }

  static const char* value(const ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91224dc465a6f21dULL;
  static const uint64_t static_value2 = 0x706763bf5df5f87eULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/TrakingPerformance";
  }

  static const char* value(const ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Header\n"
"std_msgs/Header header\n"
"# MPC finite state machine state\n"
"std_msgs/Int64 fsm_state\n"
"# Solving time consuming\n"
"float64 mpc_solve_time\n"
"\n"
"QuadrotorState desire\n"
"QuadrotorState feedback\n"
"QuadrotorState error\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
"================================================================================\n"
"MSG: quadrotor_msgs/QuadrotorState\n"
"float64 thrust\n"
"float64 velocity_norm\n"
"float64 acceleration_norm\n"
"float64 jerk_norm\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration\n"
"geometry_msgs/Vector3 jerk\n"
"geometry_msgs/Vector3 snap\n"
"geometry_msgs/Vector3 attitude\n"
"geometry_msgs/Vector3 angular_velocity\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fsm_state);
      stream.next(m.mpc_solve_time);
      stream.next(m.desire);
      stream.next(m.feedback);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrakingPerformance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::TrakingPerformance_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fsm_state: ";
    s << std::endl;
    Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "  ", v.fsm_state);
    s << indent << "mpc_solve_time: ";
    Printer<double>::stream(s, indent + "  ", v.mpc_solve_time);
    s << indent << "desire: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >::stream(s, indent + "  ", v.desire);
    s << indent << "feedback: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >::stream(s, indent + "  ", v.feedback);
    s << indent << "error: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_TRAKINGPERFORMANCE_H
