// Generated by gencpp from file quadrotor_msgs/oa_manager_debug.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_OA_MANAGER_DEBUG_H
#define QUADROTOR_MSGS_MESSAGE_OA_MANAGER_DEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct oa_manager_debug_
{
  typedef oa_manager_debug_<ContainerAllocator> Type;

  oa_manager_debug_()
    : header()
    , stereo_image_status_0_(0)
    , stereo_image_status_1_(0)
    , stereo_image_status_2_(0)
    , stereo_image_status_3_(0)
    , stereo_image_status_4_(0)
    , stereo_image_status_5_(0)
    , motor_active(0)
    , in_air(0)
    , fc_ctrl_mode(0)
    , wm232_front_flag(0)
    , tof_ground_filter_flag_0_(0)
    , tof_ground_filter_flag_1_(0)
    , tof_ground_filter_flag_2_(0)
    , tof_ground_filter_flag_3_(0)
    , tof_ground_filter_flag_4_(0)
    , tof_ground_filter_flag_5_(0)
    , radar_up_output_mm(0)
    , radar_down_output_mm(0)
    , radar_hon_disp_range_cfg_mm(0)
    , radar_down_disp_range_cfg_mm(0)
    , radar_up_disp_range_cfg_mm(0)
    , large_atti_no_oa(0)
    , oa_status_top_bar(0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , radar_graph_0_(0)
    , radar_graph_1_(0)
    , radar_graph_2_(0)
    , radar_graph_3_(0)
    , tof_radar_graph_data_mm_0_(0)
    , tof_radar_graph_data_mm_1_(0)
    , tof_radar_graph_data_mm_2_(0)
    , tof_radar_graph_data_mm_3_(0)
    , img_sts_ok_0_(0)
    , img_sts_ok_1_(0)
    , img_sts_ok_2_(0)
    , img_sts_ok_3_(0)
    , img_sts_ok_4_(0)
    , img_sts_ok_5_(0)
    , abnormal_dark_0_(0)
    , abnormal_dark_1_(0)
    , abnormal_dark_2_(0)
    , abnormal_dark_3_(0)
    , abnormal_dark_4_(0)
    , abnormal_dark_5_(0)
    , abnormal_bright_0_(0)
    , abnormal_bright_1_(0)
    , abnormal_bright_2_(0)
    , abnormal_bright_3_(0)
    , abnormal_bright_4_(0)
    , abnormal_bright_5_(0)
    , abnormal_similarity_0_(0)
    , abnormal_similarity_1_(0)
    , abnormal_similarity_2_(0)
    , abnormal_similarity_3_(0)
    , abnormal_similarity_4_(0)
    , abnormal_similarity_5_(0)  {
    }
  oa_manager_debug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , stereo_image_status_0_(0)
    , stereo_image_status_1_(0)
    , stereo_image_status_2_(0)
    , stereo_image_status_3_(0)
    , stereo_image_status_4_(0)
    , stereo_image_status_5_(0)
    , motor_active(0)
    , in_air(0)
    , fc_ctrl_mode(0)
    , wm232_front_flag(0)
    , tof_ground_filter_flag_0_(0)
    , tof_ground_filter_flag_1_(0)
    , tof_ground_filter_flag_2_(0)
    , tof_ground_filter_flag_3_(0)
    , tof_ground_filter_flag_4_(0)
    , tof_ground_filter_flag_5_(0)
    , radar_up_output_mm(0)
    , radar_down_output_mm(0)
    , radar_hon_disp_range_cfg_mm(0)
    , radar_down_disp_range_cfg_mm(0)
    , radar_up_disp_range_cfg_mm(0)
    , large_atti_no_oa(0)
    , oa_status_top_bar(0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , radar_graph_0_(0)
    , radar_graph_1_(0)
    , radar_graph_2_(0)
    , radar_graph_3_(0)
    , tof_radar_graph_data_mm_0_(0)
    , tof_radar_graph_data_mm_1_(0)
    , tof_radar_graph_data_mm_2_(0)
    , tof_radar_graph_data_mm_3_(0)
    , img_sts_ok_0_(0)
    , img_sts_ok_1_(0)
    , img_sts_ok_2_(0)
    , img_sts_ok_3_(0)
    , img_sts_ok_4_(0)
    , img_sts_ok_5_(0)
    , abnormal_dark_0_(0)
    , abnormal_dark_1_(0)
    , abnormal_dark_2_(0)
    , abnormal_dark_3_(0)
    , abnormal_dark_4_(0)
    , abnormal_dark_5_(0)
    , abnormal_bright_0_(0)
    , abnormal_bright_1_(0)
    , abnormal_bright_2_(0)
    , abnormal_bright_3_(0)
    , abnormal_bright_4_(0)
    , abnormal_bright_5_(0)
    , abnormal_similarity_0_(0)
    , abnormal_similarity_1_(0)
    , abnormal_similarity_2_(0)
    , abnormal_similarity_3_(0)
    , abnormal_similarity_4_(0)
    , abnormal_similarity_5_(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _stereo_image_status_0__type;
  _stereo_image_status_0__type stereo_image_status_0_;

   typedef uint8_t _stereo_image_status_1__type;
  _stereo_image_status_1__type stereo_image_status_1_;

   typedef uint8_t _stereo_image_status_2__type;
  _stereo_image_status_2__type stereo_image_status_2_;

   typedef uint8_t _stereo_image_status_3__type;
  _stereo_image_status_3__type stereo_image_status_3_;

   typedef uint8_t _stereo_image_status_4__type;
  _stereo_image_status_4__type stereo_image_status_4_;

   typedef uint8_t _stereo_image_status_5__type;
  _stereo_image_status_5__type stereo_image_status_5_;

   typedef uint8_t _motor_active_type;
  _motor_active_type motor_active;

   typedef uint8_t _in_air_type;
  _in_air_type in_air;

   typedef uint8_t _fc_ctrl_mode_type;
  _fc_ctrl_mode_type fc_ctrl_mode;

   typedef uint8_t _wm232_front_flag_type;
  _wm232_front_flag_type wm232_front_flag;

   typedef uint8_t _tof_ground_filter_flag_0__type;
  _tof_ground_filter_flag_0__type tof_ground_filter_flag_0_;

   typedef uint8_t _tof_ground_filter_flag_1__type;
  _tof_ground_filter_flag_1__type tof_ground_filter_flag_1_;

   typedef uint8_t _tof_ground_filter_flag_2__type;
  _tof_ground_filter_flag_2__type tof_ground_filter_flag_2_;

   typedef uint8_t _tof_ground_filter_flag_3__type;
  _tof_ground_filter_flag_3__type tof_ground_filter_flag_3_;

   typedef uint8_t _tof_ground_filter_flag_4__type;
  _tof_ground_filter_flag_4__type tof_ground_filter_flag_4_;

   typedef uint8_t _tof_ground_filter_flag_5__type;
  _tof_ground_filter_flag_5__type tof_ground_filter_flag_5_;

   typedef uint16_t _radar_up_output_mm_type;
  _radar_up_output_mm_type radar_up_output_mm;

   typedef uint16_t _radar_down_output_mm_type;
  _radar_down_output_mm_type radar_down_output_mm;

   typedef uint16_t _radar_hon_disp_range_cfg_mm_type;
  _radar_hon_disp_range_cfg_mm_type radar_hon_disp_range_cfg_mm;

   typedef uint16_t _radar_down_disp_range_cfg_mm_type;
  _radar_down_disp_range_cfg_mm_type radar_down_disp_range_cfg_mm;

   typedef uint16_t _radar_up_disp_range_cfg_mm_type;
  _radar_up_disp_range_cfg_mm_type radar_up_disp_range_cfg_mm;

   typedef uint8_t _large_atti_no_oa_type;
  _large_atti_no_oa_type large_atti_no_oa;

   typedef uint16_t _oa_status_top_bar_type;
  _oa_status_top_bar_type oa_status_top_bar;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef int32_t _radar_graph_0__type;
  _radar_graph_0__type radar_graph_0_;

   typedef int32_t _radar_graph_1__type;
  _radar_graph_1__type radar_graph_1_;

   typedef int32_t _radar_graph_2__type;
  _radar_graph_2__type radar_graph_2_;

   typedef int32_t _radar_graph_3__type;
  _radar_graph_3__type radar_graph_3_;

   typedef uint16_t _tof_radar_graph_data_mm_0__type;
  _tof_radar_graph_data_mm_0__type tof_radar_graph_data_mm_0_;

   typedef uint16_t _tof_radar_graph_data_mm_1__type;
  _tof_radar_graph_data_mm_1__type tof_radar_graph_data_mm_1_;

   typedef uint16_t _tof_radar_graph_data_mm_2__type;
  _tof_radar_graph_data_mm_2__type tof_radar_graph_data_mm_2_;

   typedef uint16_t _tof_radar_graph_data_mm_3__type;
  _tof_radar_graph_data_mm_3__type tof_radar_graph_data_mm_3_;

   typedef uint8_t _img_sts_ok_0__type;
  _img_sts_ok_0__type img_sts_ok_0_;

   typedef uint8_t _img_sts_ok_1__type;
  _img_sts_ok_1__type img_sts_ok_1_;

   typedef uint8_t _img_sts_ok_2__type;
  _img_sts_ok_2__type img_sts_ok_2_;

   typedef uint8_t _img_sts_ok_3__type;
  _img_sts_ok_3__type img_sts_ok_3_;

   typedef uint8_t _img_sts_ok_4__type;
  _img_sts_ok_4__type img_sts_ok_4_;

   typedef uint8_t _img_sts_ok_5__type;
  _img_sts_ok_5__type img_sts_ok_5_;

   typedef uint8_t _abnormal_dark_0__type;
  _abnormal_dark_0__type abnormal_dark_0_;

   typedef uint8_t _abnormal_dark_1__type;
  _abnormal_dark_1__type abnormal_dark_1_;

   typedef uint8_t _abnormal_dark_2__type;
  _abnormal_dark_2__type abnormal_dark_2_;

   typedef uint8_t _abnormal_dark_3__type;
  _abnormal_dark_3__type abnormal_dark_3_;

   typedef uint8_t _abnormal_dark_4__type;
  _abnormal_dark_4__type abnormal_dark_4_;

   typedef uint8_t _abnormal_dark_5__type;
  _abnormal_dark_5__type abnormal_dark_5_;

   typedef uint8_t _abnormal_bright_0__type;
  _abnormal_bright_0__type abnormal_bright_0_;

   typedef uint8_t _abnormal_bright_1__type;
  _abnormal_bright_1__type abnormal_bright_1_;

   typedef uint8_t _abnormal_bright_2__type;
  _abnormal_bright_2__type abnormal_bright_2_;

   typedef uint8_t _abnormal_bright_3__type;
  _abnormal_bright_3__type abnormal_bright_3_;

   typedef uint8_t _abnormal_bright_4__type;
  _abnormal_bright_4__type abnormal_bright_4_;

   typedef uint8_t _abnormal_bright_5__type;
  _abnormal_bright_5__type abnormal_bright_5_;

   typedef uint8_t _abnormal_similarity_0__type;
  _abnormal_similarity_0__type abnormal_similarity_0_;

   typedef uint8_t _abnormal_similarity_1__type;
  _abnormal_similarity_1__type abnormal_similarity_1_;

   typedef uint8_t _abnormal_similarity_2__type;
  _abnormal_similarity_2__type abnormal_similarity_2_;

   typedef uint8_t _abnormal_similarity_3__type;
  _abnormal_similarity_3__type abnormal_similarity_3_;

   typedef uint8_t _abnormal_similarity_4__type;
  _abnormal_similarity_4__type abnormal_similarity_4_;

   typedef uint8_t _abnormal_similarity_5__type;
  _abnormal_similarity_5__type abnormal_similarity_5_;





  typedef boost::shared_ptr< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> const> ConstPtr;

}; // struct oa_manager_debug_

typedef ::quadrotor_msgs::oa_manager_debug_<std::allocator<void> > oa_manager_debug;

typedef boost::shared_ptr< ::quadrotor_msgs::oa_manager_debug > oa_manager_debugPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::oa_manager_debug const> oa_manager_debugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.stereo_image_status_0_ == rhs.stereo_image_status_0_ &&
    lhs.stereo_image_status_1_ == rhs.stereo_image_status_1_ &&
    lhs.stereo_image_status_2_ == rhs.stereo_image_status_2_ &&
    lhs.stereo_image_status_3_ == rhs.stereo_image_status_3_ &&
    lhs.stereo_image_status_4_ == rhs.stereo_image_status_4_ &&
    lhs.stereo_image_status_5_ == rhs.stereo_image_status_5_ &&
    lhs.motor_active == rhs.motor_active &&
    lhs.in_air == rhs.in_air &&
    lhs.fc_ctrl_mode == rhs.fc_ctrl_mode &&
    lhs.wm232_front_flag == rhs.wm232_front_flag &&
    lhs.tof_ground_filter_flag_0_ == rhs.tof_ground_filter_flag_0_ &&
    lhs.tof_ground_filter_flag_1_ == rhs.tof_ground_filter_flag_1_ &&
    lhs.tof_ground_filter_flag_2_ == rhs.tof_ground_filter_flag_2_ &&
    lhs.tof_ground_filter_flag_3_ == rhs.tof_ground_filter_flag_3_ &&
    lhs.tof_ground_filter_flag_4_ == rhs.tof_ground_filter_flag_4_ &&
    lhs.tof_ground_filter_flag_5_ == rhs.tof_ground_filter_flag_5_ &&
    lhs.radar_up_output_mm == rhs.radar_up_output_mm &&
    lhs.radar_down_output_mm == rhs.radar_down_output_mm &&
    lhs.radar_hon_disp_range_cfg_mm == rhs.radar_hon_disp_range_cfg_mm &&
    lhs.radar_down_disp_range_cfg_mm == rhs.radar_down_disp_range_cfg_mm &&
    lhs.radar_up_disp_range_cfg_mm == rhs.radar_up_disp_range_cfg_mm &&
    lhs.large_atti_no_oa == rhs.large_atti_no_oa &&
    lhs.oa_status_top_bar == rhs.oa_status_top_bar &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.radar_graph_0_ == rhs.radar_graph_0_ &&
    lhs.radar_graph_1_ == rhs.radar_graph_1_ &&
    lhs.radar_graph_2_ == rhs.radar_graph_2_ &&
    lhs.radar_graph_3_ == rhs.radar_graph_3_ &&
    lhs.tof_radar_graph_data_mm_0_ == rhs.tof_radar_graph_data_mm_0_ &&
    lhs.tof_radar_graph_data_mm_1_ == rhs.tof_radar_graph_data_mm_1_ &&
    lhs.tof_radar_graph_data_mm_2_ == rhs.tof_radar_graph_data_mm_2_ &&
    lhs.tof_radar_graph_data_mm_3_ == rhs.tof_radar_graph_data_mm_3_ &&
    lhs.img_sts_ok_0_ == rhs.img_sts_ok_0_ &&
    lhs.img_sts_ok_1_ == rhs.img_sts_ok_1_ &&
    lhs.img_sts_ok_2_ == rhs.img_sts_ok_2_ &&
    lhs.img_sts_ok_3_ == rhs.img_sts_ok_3_ &&
    lhs.img_sts_ok_4_ == rhs.img_sts_ok_4_ &&
    lhs.img_sts_ok_5_ == rhs.img_sts_ok_5_ &&
    lhs.abnormal_dark_0_ == rhs.abnormal_dark_0_ &&
    lhs.abnormal_dark_1_ == rhs.abnormal_dark_1_ &&
    lhs.abnormal_dark_2_ == rhs.abnormal_dark_2_ &&
    lhs.abnormal_dark_3_ == rhs.abnormal_dark_3_ &&
    lhs.abnormal_dark_4_ == rhs.abnormal_dark_4_ &&
    lhs.abnormal_dark_5_ == rhs.abnormal_dark_5_ &&
    lhs.abnormal_bright_0_ == rhs.abnormal_bright_0_ &&
    lhs.abnormal_bright_1_ == rhs.abnormal_bright_1_ &&
    lhs.abnormal_bright_2_ == rhs.abnormal_bright_2_ &&
    lhs.abnormal_bright_3_ == rhs.abnormal_bright_3_ &&
    lhs.abnormal_bright_4_ == rhs.abnormal_bright_4_ &&
    lhs.abnormal_bright_5_ == rhs.abnormal_bright_5_ &&
    lhs.abnormal_similarity_0_ == rhs.abnormal_similarity_0_ &&
    lhs.abnormal_similarity_1_ == rhs.abnormal_similarity_1_ &&
    lhs.abnormal_similarity_2_ == rhs.abnormal_similarity_2_ &&
    lhs.abnormal_similarity_3_ == rhs.abnormal_similarity_3_ &&
    lhs.abnormal_similarity_4_ == rhs.abnormal_similarity_4_ &&
    lhs.abnormal_similarity_5_ == rhs.abnormal_similarity_5_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fe2189ab02dae1ff093d243f6f55759";
  }

  static const char* value(const ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fe2189ab02dae1fULL;
  static const uint64_t static_value2 = 0xf093d243f6f55759ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/oa_manager_debug";
  }

  static const char* value(const ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint8 stereo_image_status_0_\n"
"uint8 stereo_image_status_1_\n"
"uint8 stereo_image_status_2_\n"
"uint8 stereo_image_status_3_\n"
"uint8 stereo_image_status_4_\n"
"uint8 stereo_image_status_5_\n"
"uint8 motor_active\n"
"uint8 in_air\n"
"uint8 fc_ctrl_mode\n"
"uint8 wm232_front_flag\n"
"uint8 tof_ground_filter_flag_0_\n"
"uint8 tof_ground_filter_flag_1_\n"
"uint8 tof_ground_filter_flag_2_\n"
"uint8 tof_ground_filter_flag_3_\n"
"uint8 tof_ground_filter_flag_4_\n"
"uint8 tof_ground_filter_flag_5_\n"
"uint16 radar_up_output_mm\n"
"uint16 radar_down_output_mm\n"
"uint16 radar_hon_disp_range_cfg_mm\n"
"uint16 radar_down_disp_range_cfg_mm\n"
"uint16 radar_up_disp_range_cfg_mm\n"
"uint8 large_atti_no_oa\n"
"uint16 oa_status_top_bar\n"
"float32 yaw\n"
"float32 pitch\n"
"float32 roll\n"
"int32 radar_graph_0_\n"
"int32 radar_graph_1_\n"
"int32 radar_graph_2_\n"
"int32 radar_graph_3_\n"
"uint16 tof_radar_graph_data_mm_0_\n"
"uint16 tof_radar_graph_data_mm_1_\n"
"uint16 tof_radar_graph_data_mm_2_\n"
"uint16 tof_radar_graph_data_mm_3_\n"
"uint8 img_sts_ok_0_\n"
"uint8 img_sts_ok_1_\n"
"uint8 img_sts_ok_2_\n"
"uint8 img_sts_ok_3_\n"
"uint8 img_sts_ok_4_\n"
"uint8 img_sts_ok_5_\n"
"uint8 abnormal_dark_0_\n"
"uint8 abnormal_dark_1_\n"
"uint8 abnormal_dark_2_\n"
"uint8 abnormal_dark_3_\n"
"uint8 abnormal_dark_4_\n"
"uint8 abnormal_dark_5_\n"
"uint8 abnormal_bright_0_\n"
"uint8 abnormal_bright_1_\n"
"uint8 abnormal_bright_2_\n"
"uint8 abnormal_bright_3_\n"
"uint8 abnormal_bright_4_\n"
"uint8 abnormal_bright_5_\n"
"uint8 abnormal_similarity_0_\n"
"uint8 abnormal_similarity_1_\n"
"uint8 abnormal_similarity_2_\n"
"uint8 abnormal_similarity_3_\n"
"uint8 abnormal_similarity_4_\n"
"uint8 abnormal_similarity_5_\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.stereo_image_status_0_);
      stream.next(m.stereo_image_status_1_);
      stream.next(m.stereo_image_status_2_);
      stream.next(m.stereo_image_status_3_);
      stream.next(m.stereo_image_status_4_);
      stream.next(m.stereo_image_status_5_);
      stream.next(m.motor_active);
      stream.next(m.in_air);
      stream.next(m.fc_ctrl_mode);
      stream.next(m.wm232_front_flag);
      stream.next(m.tof_ground_filter_flag_0_);
      stream.next(m.tof_ground_filter_flag_1_);
      stream.next(m.tof_ground_filter_flag_2_);
      stream.next(m.tof_ground_filter_flag_3_);
      stream.next(m.tof_ground_filter_flag_4_);
      stream.next(m.tof_ground_filter_flag_5_);
      stream.next(m.radar_up_output_mm);
      stream.next(m.radar_down_output_mm);
      stream.next(m.radar_hon_disp_range_cfg_mm);
      stream.next(m.radar_down_disp_range_cfg_mm);
      stream.next(m.radar_up_disp_range_cfg_mm);
      stream.next(m.large_atti_no_oa);
      stream.next(m.oa_status_top_bar);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.radar_graph_0_);
      stream.next(m.radar_graph_1_);
      stream.next(m.radar_graph_2_);
      stream.next(m.radar_graph_3_);
      stream.next(m.tof_radar_graph_data_mm_0_);
      stream.next(m.tof_radar_graph_data_mm_1_);
      stream.next(m.tof_radar_graph_data_mm_2_);
      stream.next(m.tof_radar_graph_data_mm_3_);
      stream.next(m.img_sts_ok_0_);
      stream.next(m.img_sts_ok_1_);
      stream.next(m.img_sts_ok_2_);
      stream.next(m.img_sts_ok_3_);
      stream.next(m.img_sts_ok_4_);
      stream.next(m.img_sts_ok_5_);
      stream.next(m.abnormal_dark_0_);
      stream.next(m.abnormal_dark_1_);
      stream.next(m.abnormal_dark_2_);
      stream.next(m.abnormal_dark_3_);
      stream.next(m.abnormal_dark_4_);
      stream.next(m.abnormal_dark_5_);
      stream.next(m.abnormal_bright_0_);
      stream.next(m.abnormal_bright_1_);
      stream.next(m.abnormal_bright_2_);
      stream.next(m.abnormal_bright_3_);
      stream.next(m.abnormal_bright_4_);
      stream.next(m.abnormal_bright_5_);
      stream.next(m.abnormal_similarity_0_);
      stream.next(m.abnormal_similarity_1_);
      stream.next(m.abnormal_similarity_2_);
      stream.next(m.abnormal_similarity_3_);
      stream.next(m.abnormal_similarity_4_);
      stream.next(m.abnormal_similarity_5_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct oa_manager_debug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::oa_manager_debug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "stereo_image_status_0_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stereo_image_status_0_);
    s << indent << "stereo_image_status_1_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stereo_image_status_1_);
    s << indent << "stereo_image_status_2_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stereo_image_status_2_);
    s << indent << "stereo_image_status_3_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stereo_image_status_3_);
    s << indent << "stereo_image_status_4_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stereo_image_status_4_);
    s << indent << "stereo_image_status_5_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stereo_image_status_5_);
    s << indent << "motor_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_active);
    s << indent << "in_air: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_air);
    s << indent << "fc_ctrl_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fc_ctrl_mode);
    s << indent << "wm232_front_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wm232_front_flag);
    s << indent << "tof_ground_filter_flag_0_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tof_ground_filter_flag_0_);
    s << indent << "tof_ground_filter_flag_1_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tof_ground_filter_flag_1_);
    s << indent << "tof_ground_filter_flag_2_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tof_ground_filter_flag_2_);
    s << indent << "tof_ground_filter_flag_3_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tof_ground_filter_flag_3_);
    s << indent << "tof_ground_filter_flag_4_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tof_ground_filter_flag_4_);
    s << indent << "tof_ground_filter_flag_5_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tof_ground_filter_flag_5_);
    s << indent << "radar_up_output_mm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.radar_up_output_mm);
    s << indent << "radar_down_output_mm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.radar_down_output_mm);
    s << indent << "radar_hon_disp_range_cfg_mm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.radar_hon_disp_range_cfg_mm);
    s << indent << "radar_down_disp_range_cfg_mm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.radar_down_disp_range_cfg_mm);
    s << indent << "radar_up_disp_range_cfg_mm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.radar_up_disp_range_cfg_mm);
    s << indent << "large_atti_no_oa: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.large_atti_no_oa);
    s << indent << "oa_status_top_bar: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.oa_status_top_bar);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "radar_graph_0_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radar_graph_0_);
    s << indent << "radar_graph_1_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radar_graph_1_);
    s << indent << "radar_graph_2_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radar_graph_2_);
    s << indent << "radar_graph_3_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radar_graph_3_);
    s << indent << "tof_radar_graph_data_mm_0_: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tof_radar_graph_data_mm_0_);
    s << indent << "tof_radar_graph_data_mm_1_: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tof_radar_graph_data_mm_1_);
    s << indent << "tof_radar_graph_data_mm_2_: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tof_radar_graph_data_mm_2_);
    s << indent << "tof_radar_graph_data_mm_3_: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tof_radar_graph_data_mm_3_);
    s << indent << "img_sts_ok_0_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.img_sts_ok_0_);
    s << indent << "img_sts_ok_1_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.img_sts_ok_1_);
    s << indent << "img_sts_ok_2_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.img_sts_ok_2_);
    s << indent << "img_sts_ok_3_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.img_sts_ok_3_);
    s << indent << "img_sts_ok_4_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.img_sts_ok_4_);
    s << indent << "img_sts_ok_5_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.img_sts_ok_5_);
    s << indent << "abnormal_dark_0_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_dark_0_);
    s << indent << "abnormal_dark_1_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_dark_1_);
    s << indent << "abnormal_dark_2_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_dark_2_);
    s << indent << "abnormal_dark_3_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_dark_3_);
    s << indent << "abnormal_dark_4_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_dark_4_);
    s << indent << "abnormal_dark_5_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_dark_5_);
    s << indent << "abnormal_bright_0_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_bright_0_);
    s << indent << "abnormal_bright_1_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_bright_1_);
    s << indent << "abnormal_bright_2_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_bright_2_);
    s << indent << "abnormal_bright_3_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_bright_3_);
    s << indent << "abnormal_bright_4_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_bright_4_);
    s << indent << "abnormal_bright_5_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_bright_5_);
    s << indent << "abnormal_similarity_0_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_similarity_0_);
    s << indent << "abnormal_similarity_1_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_similarity_1_);
    s << indent << "abnormal_similarity_2_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_similarity_2_);
    s << indent << "abnormal_similarity_3_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_similarity_3_);
    s << indent << "abnormal_similarity_4_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_similarity_4_);
    s << indent << "abnormal_similarity_5_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abnormal_similarity_5_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_OA_MANAGER_DEBUG_H
