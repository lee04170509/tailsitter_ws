// Generated by gencpp from file quadrotor_msgs/oa_result.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_OA_RESULT_H
#define QUADROTOR_MSGS_MESSAGE_OA_RESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct oa_result_
{
  typedef oa_result_<ContainerAllocator> Type;

  oa_result_()
    : header()
    , direction(0)
    , reserved(0)
    , tof_dist(0.0)
    , image_index(0)
    , image_timestamp(0)
    , object_distance()
    , stop(0)
    , failed_distance(0)
    , failed_distance_app(0)
    , speed_limit(0)
    , alarm(0)
    , object_distance_app()
    , high_atti(0)
    , is_release_brake(0)  {
      object_distance.assign(0);

      object_distance_app.assign(0);
  }
  oa_result_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , direction(0)
    , reserved(0)
    , tof_dist(0.0)
    , image_index(0)
    , image_timestamp(0)
    , object_distance()
    , stop(0)
    , failed_distance(0)
    , failed_distance_app(0)
    , speed_limit(0)
    , alarm(0)
    , object_distance_app()
    , high_atti(0)
    , is_release_brake(0)  {
  (void)_alloc;
      object_distance.assign(0);

      object_distance_app.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _direction_type;
  _direction_type direction;

   typedef int32_t _reserved_type;
  _reserved_type reserved;

   typedef float _tof_dist_type;
  _tof_dist_type tof_dist;

   typedef int32_t _image_index_type;
  _image_index_type image_index;

   typedef uint32_t _image_timestamp_type;
  _image_timestamp_type image_timestamp;

   typedef boost::array<int16_t, 3>  _object_distance_type;
  _object_distance_type object_distance;

   typedef uint8_t _stop_type;
  _stop_type stop;

   typedef uint8_t _failed_distance_type;
  _failed_distance_type failed_distance;

   typedef uint8_t _failed_distance_app_type;
  _failed_distance_app_type failed_distance_app;

   typedef uint8_t _speed_limit_type;
  _speed_limit_type speed_limit;

   typedef uint8_t _alarm_type;
  _alarm_type alarm;

   typedef boost::array<int16_t, 4>  _object_distance_app_type;
  _object_distance_app_type object_distance_app;

   typedef int32_t _high_atti_type;
  _high_atti_type high_atti;

   typedef int32_t _is_release_brake_type;
  _is_release_brake_type is_release_brake;





  typedef boost::shared_ptr< ::quadrotor_msgs::oa_result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::oa_result_<ContainerAllocator> const> ConstPtr;

}; // struct oa_result_

typedef ::quadrotor_msgs::oa_result_<std::allocator<void> > oa_result;

typedef boost::shared_ptr< ::quadrotor_msgs::oa_result > oa_resultPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::oa_result const> oa_resultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::oa_result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::oa_result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::oa_result_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::oa_result_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.direction == rhs.direction &&
    lhs.reserved == rhs.reserved &&
    lhs.tof_dist == rhs.tof_dist &&
    lhs.image_index == rhs.image_index &&
    lhs.image_timestamp == rhs.image_timestamp &&
    lhs.object_distance == rhs.object_distance &&
    lhs.stop == rhs.stop &&
    lhs.failed_distance == rhs.failed_distance &&
    lhs.failed_distance_app == rhs.failed_distance_app &&
    lhs.speed_limit == rhs.speed_limit &&
    lhs.alarm == rhs.alarm &&
    lhs.object_distance_app == rhs.object_distance_app &&
    lhs.high_atti == rhs.high_atti &&
    lhs.is_release_brake == rhs.is_release_brake;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::oa_result_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::oa_result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::oa_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::oa_result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::oa_result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::oa_result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::oa_result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::oa_result_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::oa_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f8843ccbd246ed329e5be927b5cd5cb";
  }

  static const char* value(const ::quadrotor_msgs::oa_result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f8843ccbd246ed3ULL;
  static const uint64_t static_value2 = 0x29e5be927b5cd5cbULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::oa_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/oa_result";
  }

  static const char* value(const ::quadrotor_msgs::oa_result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::oa_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint32 direction\n"
"int32 reserved\n"
"float32 tof_dist\n"
"int32 image_index\n"
"uint32 image_timestamp\n"
"int16[3] object_distance        # uint8 NUMBER_SUB_DIRECTIONS = 3, for FC\n"
"uint8 stop\n"
"uint8 failed_distance\n"
"uint8 failed_distance_app\n"
"uint8 speed_limit\n"
"uint8 alarm\n"
"int16[4] object_distance_app    # uint8 NUMBER_SUB_DIRECTIONS_FOR_APP = 4, for APP\n"
"int32 high_atti\n"
"int32 is_release_brake\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::oa_result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::oa_result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.direction);
      stream.next(m.reserved);
      stream.next(m.tof_dist);
      stream.next(m.image_index);
      stream.next(m.image_timestamp);
      stream.next(m.object_distance);
      stream.next(m.stop);
      stream.next(m.failed_distance);
      stream.next(m.failed_distance_app);
      stream.next(m.speed_limit);
      stream.next(m.alarm);
      stream.next(m.object_distance_app);
      stream.next(m.high_atti);
      stream.next(m.is_release_brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct oa_result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::oa_result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::oa_result_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "direction: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.direction);
    s << indent << "reserved: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reserved);
    s << indent << "tof_dist: ";
    Printer<float>::stream(s, indent + "  ", v.tof_dist);
    s << indent << "image_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_index);
    s << indent << "image_timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.image_timestamp);
    s << indent << "object_distance[]" << std::endl;
    for (size_t i = 0; i < v.object_distance.size(); ++i)
    {
      s << indent << "  object_distance[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.object_distance[i]);
    }
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
    s << indent << "failed_distance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failed_distance);
    s << indent << "failed_distance_app: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failed_distance_app);
    s << indent << "speed_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_limit);
    s << indent << "alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm);
    s << indent << "object_distance_app[]" << std::endl;
    for (size_t i = 0; i < v.object_distance_app.size(); ++i)
    {
      s << indent << "  object_distance_app[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.object_distance_app[i]);
    }
    s << indent << "high_atti: ";
    Printer<int32_t>::stream(s, indent + "  ", v.high_atti);
    s << indent << "is_release_brake: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_release_brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_OA_RESULT_H
