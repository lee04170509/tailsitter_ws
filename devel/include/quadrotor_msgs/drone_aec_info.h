// Generated by gencpp from file quadrotor_msgs/drone_aec_info.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_DRONE_AEC_INFO_H
#define QUADROTOR_MSGS_MESSAGE_DRONE_AEC_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct drone_aec_info_
{
  typedef drone_aec_info_<ContainerAllocator> Type;

  drone_aec_info_()
    : header()
    , expo_time_ms(0.0)
    , expo_gain(0.0)
    , scene_lum_lux(0.0)
    , avg_lum(0.0)  {
    }
  drone_aec_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , expo_time_ms(0.0)
    , expo_gain(0.0)
    , scene_lum_lux(0.0)
    , avg_lum(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _expo_time_ms_type;
  _expo_time_ms_type expo_time_ms;

   typedef float _expo_gain_type;
  _expo_gain_type expo_gain;

   typedef float _scene_lum_lux_type;
  _scene_lum_lux_type scene_lum_lux;

   typedef float _avg_lum_type;
  _avg_lum_type avg_lum;





  typedef boost::shared_ptr< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> const> ConstPtr;

}; // struct drone_aec_info_

typedef ::quadrotor_msgs::drone_aec_info_<std::allocator<void> > drone_aec_info;

typedef boost::shared_ptr< ::quadrotor_msgs::drone_aec_info > drone_aec_infoPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::drone_aec_info const> drone_aec_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::drone_aec_info_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::drone_aec_info_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.expo_time_ms == rhs.expo_time_ms &&
    lhs.expo_gain == rhs.expo_gain &&
    lhs.scene_lum_lux == rhs.scene_lum_lux &&
    lhs.avg_lum == rhs.avg_lum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::drone_aec_info_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::drone_aec_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3d90219ba162118512fb07f93a5de00";
  }

  static const char* value(const ::quadrotor_msgs::drone_aec_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3d90219ba162118ULL;
  static const uint64_t static_value2 = 0x512fb07f93a5de00ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/drone_aec_info";
  }

  static const char* value(const ::quadrotor_msgs::drone_aec_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float32 expo_time_ms\n"
"float32 expo_gain\n"
"float32 scene_lum_lux\n"
"float32 avg_lum\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::drone_aec_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.expo_time_ms);
      stream.next(m.expo_gain);
      stream.next(m.scene_lum_lux);
      stream.next(m.avg_lum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct drone_aec_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::drone_aec_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::drone_aec_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "expo_time_ms: ";
    Printer<float>::stream(s, indent + "  ", v.expo_time_ms);
    s << indent << "expo_gain: ";
    Printer<float>::stream(s, indent + "  ", v.expo_gain);
    s << indent << "scene_lum_lux: ";
    Printer<float>::stream(s, indent + "  ", v.scene_lum_lux);
    s << indent << "avg_lum: ";
    Printer<float>::stream(s, indent + "  ", v.avg_lum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_DRONE_AEC_INFO_H
