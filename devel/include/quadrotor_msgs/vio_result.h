// Generated by gencpp from file quadrotor_msgs/vio_result.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_VIO_RESULT_H
#define QUADROTOR_MSGS_MESSAGE_VIO_RESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct vio_result_
{
  typedef vio_result_<ContainerAllocator> Type;

  vio_result_()
    : header()
    , pose_id(0)
    , time_stamp_ms(0)
    , flag(0)
    , p_wi()
    , v_wi()
    , q_wi()
    , q_ic()
    , p_ic()
    , vps_from_vio(0.0)  {
    }
  vio_result_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose_id(0)
    , time_stamp_ms(0)
    , flag(0)
    , p_wi(_alloc)
    , v_wi(_alloc)
    , q_wi(_alloc)
    , q_ic()
    , p_ic()
    , vps_from_vio(0.0)  {
  (void)_alloc;
      q_ic.assign( ::geometry_msgs::Quaternion_<ContainerAllocator> (_alloc));

      p_ic.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _pose_id_type;
  _pose_id_type pose_id;

   typedef uint32_t _time_stamp_ms_type;
  _time_stamp_ms_type time_stamp_ms;

   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _p_wi_type;
  _p_wi_type p_wi;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _v_wi_type;
  _v_wi_type v_wi;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _q_wi_type;
  _q_wi_type q_wi;

   typedef boost::array< ::geometry_msgs::Quaternion_<ContainerAllocator> , 6>  _q_ic_type;
  _q_ic_type q_ic;

   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 6>  _p_ic_type;
  _p_ic_type p_ic;

   typedef float _vps_from_vio_type;
  _vps_from_vio_type vps_from_vio;





  typedef boost::shared_ptr< ::quadrotor_msgs::vio_result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::vio_result_<ContainerAllocator> const> ConstPtr;

}; // struct vio_result_

typedef ::quadrotor_msgs::vio_result_<std::allocator<void> > vio_result;

typedef boost::shared_ptr< ::quadrotor_msgs::vio_result > vio_resultPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::vio_result const> vio_resultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::vio_result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::vio_result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::vio_result_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::vio_result_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pose_id == rhs.pose_id &&
    lhs.time_stamp_ms == rhs.time_stamp_ms &&
    lhs.flag == rhs.flag &&
    lhs.p_wi == rhs.p_wi &&
    lhs.v_wi == rhs.v_wi &&
    lhs.q_wi == rhs.q_wi &&
    lhs.q_ic == rhs.q_ic &&
    lhs.p_ic == rhs.p_ic &&
    lhs.vps_from_vio == rhs.vps_from_vio;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::vio_result_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::vio_result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::vio_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::vio_result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::vio_result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::vio_result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::vio_result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::vio_result_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::vio_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "324b3402a89081d3fe2b8181d4ced579";
  }

  static const char* value(const ::quadrotor_msgs::vio_result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x324b3402a89081d3ULL;
  static const uint64_t static_value2 = 0xfe2b8181d4ced579ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::vio_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/vio_result";
  }

  static const char* value(const ::quadrotor_msgs::vio_result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::vio_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint32 pose_id\n"
"uint32 time_stamp_ms\n"
"uint8 flag\n"
"geometry_msgs/Vector3 p_wi\n"
"geometry_msgs/Vector3 v_wi\n"
"geometry_msgs/Quaternion q_wi\n"
"geometry_msgs/Quaternion[6] q_ic\n"
"geometry_msgs/Vector3[6] p_ic\n"
"float32 vps_from_vio\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::quadrotor_msgs::vio_result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::vio_result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose_id);
      stream.next(m.time_stamp_ms);
      stream.next(m.flag);
      stream.next(m.p_wi);
      stream.next(m.v_wi);
      stream.next(m.q_wi);
      stream.next(m.q_ic);
      stream.next(m.p_ic);
      stream.next(m.vps_from_vio);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vio_result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::vio_result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::vio_result_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pose_id);
    s << indent << "time_stamp_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_stamp_ms);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "p_wi: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.p_wi);
    s << indent << "v_wi: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.v_wi);
    s << indent << "q_wi: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.q_wi);
    s << indent << "q_ic[]" << std::endl;
    for (size_t i = 0; i < v.q_ic.size(); ++i)
    {
      s << indent << "  q_ic[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "    ", v.q_ic[i]);
    }
    s << indent << "p_ic[]" << std::endl;
    for (size_t i = 0; i < v.p_ic.size(); ++i)
    {
      s << indent << "  p_ic[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.p_ic[i]);
    }
    s << indent << "vps_from_vio: ";
    Printer<float>::stream(s, indent + "  ", v.vps_from_vio);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_VIO_RESULT_H
