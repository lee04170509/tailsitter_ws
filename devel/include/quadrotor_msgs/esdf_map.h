// Generated by gencpp from file quadrotor_msgs/esdf_map.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_ESDF_MAP_H
#define QUADROTOR_MSGS_MESSAGE_ESDF_MAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct esdf_map_
{
  typedef esdf_map_<ContainerAllocator> Type;

  esdf_map_()
    : header()
    , map_plantform(0)
    , map_version(0)
    , map_log_version(0)
    , map_log_type(0)  {
    }
  esdf_map_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , map_plantform(0)
    , map_version(0)
    , map_log_version(0)
    , map_log_type(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _map_plantform_type;
  _map_plantform_type map_plantform;

   typedef uint8_t _map_version_type;
  _map_version_type map_version;

   typedef uint8_t _map_log_version_type;
  _map_log_version_type map_log_version;

   typedef uint8_t _map_log_type_type;
  _map_log_type_type map_log_type;





  typedef boost::shared_ptr< ::quadrotor_msgs::esdf_map_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::esdf_map_<ContainerAllocator> const> ConstPtr;

}; // struct esdf_map_

typedef ::quadrotor_msgs::esdf_map_<std::allocator<void> > esdf_map;

typedef boost::shared_ptr< ::quadrotor_msgs::esdf_map > esdf_mapPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::esdf_map const> esdf_mapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::esdf_map_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::esdf_map_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::esdf_map_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::esdf_map_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.map_plantform == rhs.map_plantform &&
    lhs.map_version == rhs.map_version &&
    lhs.map_log_version == rhs.map_log_version &&
    lhs.map_log_type == rhs.map_log_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::esdf_map_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::esdf_map_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::esdf_map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::esdf_map_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::esdf_map_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::esdf_map_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::esdf_map_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::esdf_map_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::esdf_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7e611753bf33b0e49ba1e83fb044535";
  }

  static const char* value(const ::quadrotor_msgs::esdf_map_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7e611753bf33b0eULL;
  static const uint64_t static_value2 = 0x49ba1e83fb044535ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::esdf_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/esdf_map";
  }

  static const char* value(const ::quadrotor_msgs::esdf_map_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::esdf_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 map_plantform\n"
"uint8 map_version\n"
"uint8 map_log_version\n"
"uint8 map_log_type\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::esdf_map_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::esdf_map_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.map_plantform);
      stream.next(m.map_version);
      stream.next(m.map_log_version);
      stream.next(m.map_log_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct esdf_map_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::esdf_map_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::esdf_map_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "map_plantform: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.map_plantform);
    s << indent << "map_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.map_version);
    s << indent << "map_log_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.map_log_version);
    s << indent << "map_log_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.map_log_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_ESDF_MAP_H
