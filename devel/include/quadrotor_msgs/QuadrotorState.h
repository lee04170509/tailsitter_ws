// Generated by gencpp from file quadrotor_msgs/QuadrotorState.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_QUADROTORSTATE_H
#define QUADROTOR_MSGS_MESSAGE_QUADROTORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct QuadrotorState_
{
  typedef QuadrotorState_<ContainerAllocator> Type;

  QuadrotorState_()
    : thrust(0.0)
    , velocity_norm(0.0)
    , acceleration_norm(0.0)
    , jerk_norm(0.0)
    , position()
    , velocity()
    , acceleration()
    , jerk()
    , snap()
    , attitude()
    , angular_velocity()  {
    }
  QuadrotorState_(const ContainerAllocator& _alloc)
    : thrust(0.0)
    , velocity_norm(0.0)
    , acceleration_norm(0.0)
    , jerk_norm(0.0)
    , position(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , jerk(_alloc)
    , snap(_alloc)
    , attitude(_alloc)
    , angular_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef double _thrust_type;
  _thrust_type thrust;

   typedef double _velocity_norm_type;
  _velocity_norm_type velocity_norm;

   typedef double _acceleration_norm_type;
  _acceleration_norm_type acceleration_norm;

   typedef double _jerk_norm_type;
  _jerk_norm_type jerk_norm;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _jerk_type;
  _jerk_type jerk;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _snap_type;
  _snap_type snap;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _attitude_type;
  _attitude_type attitude;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;





  typedef boost::shared_ptr< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> const> ConstPtr;

}; // struct QuadrotorState_

typedef ::quadrotor_msgs::QuadrotorState_<std::allocator<void> > QuadrotorState;

typedef boost::shared_ptr< ::quadrotor_msgs::QuadrotorState > QuadrotorStatePtr;
typedef boost::shared_ptr< ::quadrotor_msgs::QuadrotorState const> QuadrotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::QuadrotorState_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::QuadrotorState_<ContainerAllocator2> & rhs)
{
  return lhs.thrust == rhs.thrust &&
    lhs.velocity_norm == rhs.velocity_norm &&
    lhs.acceleration_norm == rhs.acceleration_norm &&
    lhs.jerk_norm == rhs.jerk_norm &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.jerk == rhs.jerk &&
    lhs.snap == rhs.snap &&
    lhs.attitude == rhs.attitude &&
    lhs.angular_velocity == rhs.angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::QuadrotorState_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::QuadrotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f6239376b083d84c39413d50a0b4367";
  }

  static const char* value(const ::quadrotor_msgs::QuadrotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f6239376b083d84ULL;
  static const uint64_t static_value2 = 0xc39413d50a0b4367ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/QuadrotorState";
  }

  static const char* value(const ::quadrotor_msgs::QuadrotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 thrust\n"
"float64 velocity_norm\n"
"float64 acceleration_norm\n"
"float64 jerk_norm\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration\n"
"geometry_msgs/Vector3 jerk\n"
"geometry_msgs/Vector3 snap\n"
"geometry_msgs/Vector3 attitude\n"
"geometry_msgs/Vector3 angular_velocity\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quadrotor_msgs::QuadrotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thrust);
      stream.next(m.velocity_norm);
      stream.next(m.acceleration_norm);
      stream.next(m.jerk_norm);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.jerk);
      stream.next(m.snap);
      stream.next(m.attitude);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QuadrotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::QuadrotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::QuadrotorState_<ContainerAllocator>& v)
  {
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "velocity_norm: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_norm);
    s << indent << "acceleration_norm: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_norm);
    s << indent << "jerk_norm: ";
    Printer<double>::stream(s, indent + "  ", v.jerk_norm);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "jerk: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.jerk);
    s << indent << "snap: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.snap);
    s << indent << "attitude: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_QUADROTORSTATE_H
