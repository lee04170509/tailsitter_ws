// Generated by gencpp from file quadrotor_msgs/fc_to_oa.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_FC_TO_OA_H
#define QUADROTOR_MSGS_MESSAGE_FC_TO_OA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct fc_to_oa_
{
  typedef fc_to_oa_<ContainerAllocator> Type;

  fc_to_oa_()
    : header()
    , q0(0.0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , down_dist(0.0)
    , top_dist(0.0)
    , lati(0.0)
    , longti(0.0)
    , press(0.0)
    , vg_x(0.0)
    , vg_y(0.0)
    , vg_z(0.0)
    , aileron(0)
    , elevator(0)
    , throttle(0)
    , rudder(0)
    , fc_timestamp_ms(0)
    , vo_flag(0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , anti_longti(0.0)
    , anti_press(0.0)  {
    }
  fc_to_oa_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , q0(0.0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , down_dist(0.0)
    , top_dist(0.0)
    , lati(0.0)
    , longti(0.0)
    , press(0.0)
    , vg_x(0.0)
    , vg_y(0.0)
    , vg_z(0.0)
    , aileron(0)
    , elevator(0)
    , throttle(0)
    , rudder(0)
    , fc_timestamp_ms(0)
    , vo_flag(0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , anti_longti(0.0)
    , anti_press(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _q0_type;
  _q0_type q0;

   typedef float _q1_type;
  _q1_type q1;

   typedef float _q2_type;
  _q2_type q2;

   typedef float _q3_type;
  _q3_type q3;

   typedef float _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef float _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef float _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _acc_z_type;
  _acc_z_type acc_z;

   typedef float _down_dist_type;
  _down_dist_type down_dist;

   typedef float _top_dist_type;
  _top_dist_type top_dist;

   typedef float _lati_type;
  _lati_type lati;

   typedef float _longti_type;
  _longti_type longti;

   typedef float _press_type;
  _press_type press;

   typedef float _vg_x_type;
  _vg_x_type vg_x;

   typedef float _vg_y_type;
  _vg_y_type vg_y;

   typedef float _vg_z_type;
  _vg_z_type vg_z;

   typedef int16_t _aileron_type;
  _aileron_type aileron;

   typedef int16_t _elevator_type;
  _elevator_type elevator;

   typedef int16_t _throttle_type;
  _throttle_type throttle;

   typedef int16_t _rudder_type;
  _rudder_type rudder;

   typedef uint32_t _fc_timestamp_ms_type;
  _fc_timestamp_ms_type fc_timestamp_ms;

   typedef int16_t _vo_flag_type;
  _vo_flag_type vo_flag;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _anti_longti_type;
  _anti_longti_type anti_longti;

   typedef float _anti_press_type;
  _anti_press_type anti_press;





  typedef boost::shared_ptr< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> const> ConstPtr;

}; // struct fc_to_oa_

typedef ::quadrotor_msgs::fc_to_oa_<std::allocator<void> > fc_to_oa;

typedef boost::shared_ptr< ::quadrotor_msgs::fc_to_oa > fc_to_oaPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::fc_to_oa const> fc_to_oaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::fc_to_oa_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::fc_to_oa_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.q0 == rhs.q0 &&
    lhs.q1 == rhs.q1 &&
    lhs.q2 == rhs.q2 &&
    lhs.q3 == rhs.q3 &&
    lhs.gyro_x == rhs.gyro_x &&
    lhs.gyro_y == rhs.gyro_y &&
    lhs.gyro_z == rhs.gyro_z &&
    lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z &&
    lhs.down_dist == rhs.down_dist &&
    lhs.top_dist == rhs.top_dist &&
    lhs.lati == rhs.lati &&
    lhs.longti == rhs.longti &&
    lhs.press == rhs.press &&
    lhs.vg_x == rhs.vg_x &&
    lhs.vg_y == rhs.vg_y &&
    lhs.vg_z == rhs.vg_z &&
    lhs.aileron == rhs.aileron &&
    lhs.elevator == rhs.elevator &&
    lhs.throttle == rhs.throttle &&
    lhs.rudder == rhs.rudder &&
    lhs.fc_timestamp_ms == rhs.fc_timestamp_ms &&
    lhs.vo_flag == rhs.vo_flag &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.anti_longti == rhs.anti_longti &&
    lhs.anti_press == rhs.anti_press;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::fc_to_oa_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::fc_to_oa_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2d437dc8b62cfe7d33ce34dfc5bd422";
  }

  static const char* value(const ::quadrotor_msgs::fc_to_oa_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2d437dc8b62cfe7ULL;
  static const uint64_t static_value2 = 0xd33ce34dfc5bd422ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/fc_to_oa";
  }

  static const char* value(const ::quadrotor_msgs::fc_to_oa_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float32 q0\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 gyro_x\n"
"float32 gyro_y\n"
"float32 gyro_z\n"
"float32 acc_x\n"
"float32 acc_y\n"
"float32 acc_z\n"
"float32 down_dist\n"
"float32 top_dist\n"
"float32 lati\n"
"float32 longti\n"
"float32 press\n"
"float32 vg_x\n"
"float32 vg_y\n"
"float32 vg_z\n"
"int16 aileron\n"
"int16 elevator\n"
"int16 throttle\n"
"int16 rudder\n"
"uint32 fc_timestamp_ms\n"
"int16 vo_flag\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"float32 anti_longti\n"
"float32 anti_press\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::fc_to_oa_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.q0);
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.down_dist);
      stream.next(m.top_dist);
      stream.next(m.lati);
      stream.next(m.longti);
      stream.next(m.press);
      stream.next(m.vg_x);
      stream.next(m.vg_y);
      stream.next(m.vg_z);
      stream.next(m.aileron);
      stream.next(m.elevator);
      stream.next(m.throttle);
      stream.next(m.rudder);
      stream.next(m.fc_timestamp_ms);
      stream.next(m.vo_flag);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.anti_longti);
      stream.next(m.anti_press);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fc_to_oa_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::fc_to_oa_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::fc_to_oa_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "q0: ";
    Printer<float>::stream(s, indent + "  ", v.q0);
    s << indent << "q1: ";
    Printer<float>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<float>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<float>::stream(s, indent + "  ", v.q3);
    s << indent << "gyro_x: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.acc_z);
    s << indent << "down_dist: ";
    Printer<float>::stream(s, indent + "  ", v.down_dist);
    s << indent << "top_dist: ";
    Printer<float>::stream(s, indent + "  ", v.top_dist);
    s << indent << "lati: ";
    Printer<float>::stream(s, indent + "  ", v.lati);
    s << indent << "longti: ";
    Printer<float>::stream(s, indent + "  ", v.longti);
    s << indent << "press: ";
    Printer<float>::stream(s, indent + "  ", v.press);
    s << indent << "vg_x: ";
    Printer<float>::stream(s, indent + "  ", v.vg_x);
    s << indent << "vg_y: ";
    Printer<float>::stream(s, indent + "  ", v.vg_y);
    s << indent << "vg_z: ";
    Printer<float>::stream(s, indent + "  ", v.vg_z);
    s << indent << "aileron: ";
    Printer<int16_t>::stream(s, indent + "  ", v.aileron);
    s << indent << "elevator: ";
    Printer<int16_t>::stream(s, indent + "  ", v.elevator);
    s << indent << "throttle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.throttle);
    s << indent << "rudder: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rudder);
    s << indent << "fc_timestamp_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fc_timestamp_ms);
    s << indent << "vo_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vo_flag);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "anti_longti: ";
    Printer<float>::stream(s, indent + "  ", v.anti_longti);
    s << indent << "anti_press: ";
    Printer<float>::stream(s, indent + "  ", v.anti_press);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_FC_TO_OA_H
