# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swarm_msgs/ObserveTeammate.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ObserveTeammate(genpy.Message):
  _md5sum = "ee10052e28e277b9de819f4024962672"
  _type = "swarm_msgs/ObserveTeammate"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ObserveTeammate.msg
bool is_observe # Observe teammate?
uint8 teammate_id # The drone_id of observed teammate
float64[3] observed_pos  # The position of the observed teammate in my body frame
"""
  __slots__ = ['is_observe','teammate_id','observed_pos']
  _slot_types = ['bool','uint8','float64[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_observe,teammate_id,observed_pos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObserveTeammate, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_observe is None:
        self.is_observe = False
      if self.teammate_id is None:
        self.teammate_id = 0
      if self.observed_pos is None:
        self.observed_pos = [0.] * 3
    else:
      self.is_observe = False
      self.teammate_id = 0
      self.observed_pos = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.is_observe, _x.teammate_id))
      buff.write(_get_struct_3d().pack(*self.observed_pos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.is_observe, _x.teammate_id,) = _get_struct_2B().unpack(str[start:end])
      self.is_observe = bool(self.is_observe)
      start = end
      end += 24
      self.observed_pos = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.is_observe, _x.teammate_id))
      buff.write(self.observed_pos.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.is_observe, _x.teammate_id,) = _get_struct_2B().unpack(str[start:end])
      self.is_observe = bool(self.is_observe)
      start = end
      end += 24
      self.observed_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
