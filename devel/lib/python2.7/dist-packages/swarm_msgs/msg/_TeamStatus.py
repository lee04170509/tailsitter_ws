# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swarm_msgs/TeamStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import swarm_msgs.msg

class TeamStatus(genpy.Message):
  _md5sum = "73da6a2eee2932c533bd709d771dd1f5"
  _type = "swarm_msgs/TeamStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Team
uint8 my_drone_id
TeammateInfo[] teammate_info

================================================================================
MSG: swarm_msgs/TeammateInfo
# teammate info
bool is_connect
uint8 id
uint8[4] ip

"""
  __slots__ = ['my_drone_id','teammate_info']
  _slot_types = ['uint8','swarm_msgs/TeammateInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       my_drone_id,teammate_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TeamStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.my_drone_id is None:
        self.my_drone_id = 0
      if self.teammate_info is None:
        self.teammate_info = []
    else:
      self.my_drone_id = 0
      self.teammate_info = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.my_drone_id
      buff.write(_get_struct_B().pack(_x))
      length = len(self.teammate_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.teammate_info:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.is_connect, _x.id))
        _x = val1.ip
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_4B().pack(*_x))
        else:
          buff.write(_get_struct_4s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.teammate_info is None:
        self.teammate_info = None
      end = 0
      start = end
      end += 1
      (self.my_drone_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.teammate_info = []
      for i in range(0, length):
        val1 = swarm_msgs.msg.TeammateInfo()
        _x = val1
        start = end
        end += 2
        (_x.is_connect, _x.id,) = _get_struct_2B().unpack(str[start:end])
        val1.is_connect = bool(val1.is_connect)
        start = end
        end += 4
        val1.ip = str[start:end]
        self.teammate_info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.my_drone_id
      buff.write(_get_struct_B().pack(_x))
      length = len(self.teammate_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.teammate_info:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.is_connect, _x.id))
        _x = val1.ip
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_4B().pack(*_x))
        else:
          buff.write(_get_struct_4s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.teammate_info is None:
        self.teammate_info = None
      end = 0
      start = end
      end += 1
      (self.my_drone_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.teammate_info = []
      for i in range(0, length):
        val1 = swarm_msgs.msg.TeammateInfo()
        _x = val1
        start = end
        end += 2
        (_x.is_connect, _x.id,) = _get_struct_2B().unpack(str[start:end])
        val1.is_connect = bool(val1.is_connect)
        start = end
        end += 4
        val1.ip = str[start:end]
        self.teammate_info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4s = None
def _get_struct_4s():
    global _struct_4s
    if _struct_4s is None:
        _struct_4s = struct.Struct("<4s")
    return _struct_4s
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
