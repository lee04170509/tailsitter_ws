# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/ctrl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ctrl(genpy.Message):
  _md5sum = "0f530cfce16387cbbfb41657d4d60cbc"
  _type = "quadrotor_msgs/ctrl"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
float32 x_axis_ctrl
float32 y_axis_ctrl
float32 z_axis_ctrl
float32 vertical_ctrl
float32 x_feed_forward
float32 y_feed_forward
uint8   flag
uint8 FLAG_TYPE_ATTI_VERT_POS = 18   # atti control
uint8 FLAG_TYPE_VELO_YAW_RATE = 72   # velocity control
uint8 FLAG_TYPE_HORIZ_ANG_VERT_VEL_YAW_ANG = 1
uint8 FLAG_VERTICAL_THRUST_HORIZONTAL_ANGLE_YAW_RATE_HORIZONTAL_BODY = 42
uint8 FLAG_VERTICAL_POSITION_HORIZONTAL_ANGLE_YAW_RATE_HORIZONTAL_BODY = 26

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  FLAG_TYPE_ATTI_VERT_POS = 18
  FLAG_TYPE_VELO_YAW_RATE = 72
  FLAG_TYPE_HORIZ_ANG_VERT_VEL_YAW_ANG = 1
  FLAG_VERTICAL_THRUST_HORIZONTAL_ANGLE_YAW_RATE_HORIZONTAL_BODY = 42
  FLAG_VERTICAL_POSITION_HORIZONTAL_ANGLE_YAW_RATE_HORIZONTAL_BODY = 26

  __slots__ = ['header','x_axis_ctrl','y_axis_ctrl','z_axis_ctrl','vertical_ctrl','x_feed_forward','y_feed_forward','flag']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,x_axis_ctrl,y_axis_ctrl,z_axis_ctrl,vertical_ctrl,x_feed_forward,y_feed_forward,flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ctrl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.x_axis_ctrl is None:
        self.x_axis_ctrl = 0.
      if self.y_axis_ctrl is None:
        self.y_axis_ctrl = 0.
      if self.z_axis_ctrl is None:
        self.z_axis_ctrl = 0.
      if self.vertical_ctrl is None:
        self.vertical_ctrl = 0.
      if self.x_feed_forward is None:
        self.x_feed_forward = 0.
      if self.y_feed_forward is None:
        self.y_feed_forward = 0.
      if self.flag is None:
        self.flag = 0
    else:
      self.header = std_msgs.msg.Header()
      self.x_axis_ctrl = 0.
      self.y_axis_ctrl = 0.
      self.z_axis_ctrl = 0.
      self.vertical_ctrl = 0.
      self.x_feed_forward = 0.
      self.y_feed_forward = 0.
      self.flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6fB().pack(_x.x_axis_ctrl, _x.y_axis_ctrl, _x.z_axis_ctrl, _x.vertical_ctrl, _x.x_feed_forward, _x.y_feed_forward, _x.flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.x_axis_ctrl, _x.y_axis_ctrl, _x.z_axis_ctrl, _x.vertical_ctrl, _x.x_feed_forward, _x.y_feed_forward, _x.flag,) = _get_struct_6fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6fB().pack(_x.x_axis_ctrl, _x.y_axis_ctrl, _x.z_axis_ctrl, _x.vertical_ctrl, _x.x_feed_forward, _x.y_feed_forward, _x.flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.x_axis_ctrl, _x.y_axis_ctrl, _x.z_axis_ctrl, _x.vertical_ctrl, _x.x_feed_forward, _x.y_feed_forward, _x.flag,) = _get_struct_6fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6fB = None
def _get_struct_6fB():
    global _struct_6fB
    if _struct_6fB is None:
        _struct_6fB = struct.Struct("<6fB")
    return _struct_6fB
