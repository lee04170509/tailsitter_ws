# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/oa_result.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class oa_result(genpy.Message):
  _md5sum = "1f8843ccbd246ed329e5be927b5cd5cb"
  _type = "quadrotor_msgs/oa_result"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint32 direction
int32 reserved
float32 tof_dist
int32 image_index
uint32 image_timestamp
int16[3] object_distance        # uint8 NUMBER_SUB_DIRECTIONS = 3, for FC
uint8 stop
uint8 failed_distance
uint8 failed_distance_app
uint8 speed_limit
uint8 alarm
int16[4] object_distance_app    # uint8 NUMBER_SUB_DIRECTIONS_FOR_APP = 4, for APP
int32 high_atti
int32 is_release_brake
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','direction','reserved','tof_dist','image_index','image_timestamp','object_distance','stop','failed_distance','failed_distance_app','speed_limit','alarm','object_distance_app','high_atti','is_release_brake']
  _slot_types = ['std_msgs/Header','uint32','int32','float32','int32','uint32','int16[3]','uint8','uint8','uint8','uint8','uint8','int16[4]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,direction,reserved,tof_dist,image_index,image_timestamp,object_distance,stop,failed_distance,failed_distance_app,speed_limit,alarm,object_distance_app,high_atti,is_release_brake

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(oa_result, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.direction is None:
        self.direction = 0
      if self.reserved is None:
        self.reserved = 0
      if self.tof_dist is None:
        self.tof_dist = 0.
      if self.image_index is None:
        self.image_index = 0
      if self.image_timestamp is None:
        self.image_timestamp = 0
      if self.object_distance is None:
        self.object_distance = [0] * 3
      if self.stop is None:
        self.stop = 0
      if self.failed_distance is None:
        self.failed_distance = 0
      if self.failed_distance_app is None:
        self.failed_distance_app = 0
      if self.speed_limit is None:
        self.speed_limit = 0
      if self.alarm is None:
        self.alarm = 0
      if self.object_distance_app is None:
        self.object_distance_app = [0] * 4
      if self.high_atti is None:
        self.high_atti = 0
      if self.is_release_brake is None:
        self.is_release_brake = 0
    else:
      self.header = std_msgs.msg.Header()
      self.direction = 0
      self.reserved = 0
      self.tof_dist = 0.
      self.image_index = 0
      self.image_timestamp = 0
      self.object_distance = [0] * 3
      self.stop = 0
      self.failed_distance = 0
      self.failed_distance_app = 0
      self.speed_limit = 0
      self.alarm = 0
      self.object_distance_app = [0] * 4
      self.high_atti = 0
      self.is_release_brake = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IifiI().pack(_x.direction, _x.reserved, _x.tof_dist, _x.image_index, _x.image_timestamp))
      buff.write(_get_struct_3h().pack(*self.object_distance))
      _x = self
      buff.write(_get_struct_5B().pack(_x.stop, _x.failed_distance, _x.failed_distance_app, _x.speed_limit, _x.alarm))
      buff.write(_get_struct_4h().pack(*self.object_distance_app))
      _x = self
      buff.write(_get_struct_2i().pack(_x.high_atti, _x.is_release_brake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.direction, _x.reserved, _x.tof_dist, _x.image_index, _x.image_timestamp,) = _get_struct_IifiI().unpack(str[start:end])
      start = end
      end += 6
      self.object_distance = _get_struct_3h().unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.stop, _x.failed_distance, _x.failed_distance_app, _x.speed_limit, _x.alarm,) = _get_struct_5B().unpack(str[start:end])
      start = end
      end += 8
      self.object_distance_app = _get_struct_4h().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.high_atti, _x.is_release_brake,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IifiI().pack(_x.direction, _x.reserved, _x.tof_dist, _x.image_index, _x.image_timestamp))
      buff.write(self.object_distance.tostring())
      _x = self
      buff.write(_get_struct_5B().pack(_x.stop, _x.failed_distance, _x.failed_distance_app, _x.speed_limit, _x.alarm))
      buff.write(self.object_distance_app.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.high_atti, _x.is_release_brake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.direction, _x.reserved, _x.tof_dist, _x.image_index, _x.image_timestamp,) = _get_struct_IifiI().unpack(str[start:end])
      start = end
      end += 6
      self.object_distance = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      _x = self
      start = end
      end += 5
      (_x.stop, _x.failed_distance, _x.failed_distance_app, _x.speed_limit, _x.alarm,) = _get_struct_5B().unpack(str[start:end])
      start = end
      end += 8
      self.object_distance_app = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=4)
      _x = self
      start = end
      end += 8
      (_x.high_atti, _x.is_release_brake,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3h = None
def _get_struct_3h():
    global _struct_3h
    if _struct_3h is None:
        _struct_3h = struct.Struct("<3h")
    return _struct_3h
_struct_4h = None
def _get_struct_4h():
    global _struct_4h
    if _struct_4h is None:
        _struct_4h = struct.Struct("<4h")
    return _struct_4h
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
_struct_IifiI = None
def _get_struct_IifiI():
    global _struct_IifiI
    if _struct_IifiI is None:
        _struct_IifiI = struct.Struct("<IifiI")
    return _struct_IifiI
