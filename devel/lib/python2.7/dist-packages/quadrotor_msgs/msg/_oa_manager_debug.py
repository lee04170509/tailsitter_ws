# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/oa_manager_debug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class oa_manager_debug(genpy.Message):
  _md5sum = "2fe2189ab02dae1ff093d243f6f55759"
  _type = "quadrotor_msgs/oa_manager_debug"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint8 stereo_image_status_0_
uint8 stereo_image_status_1_
uint8 stereo_image_status_2_
uint8 stereo_image_status_3_
uint8 stereo_image_status_4_
uint8 stereo_image_status_5_
uint8 motor_active
uint8 in_air
uint8 fc_ctrl_mode
uint8 wm232_front_flag
uint8 tof_ground_filter_flag_0_
uint8 tof_ground_filter_flag_1_
uint8 tof_ground_filter_flag_2_
uint8 tof_ground_filter_flag_3_
uint8 tof_ground_filter_flag_4_
uint8 tof_ground_filter_flag_5_
uint16 radar_up_output_mm
uint16 radar_down_output_mm
uint16 radar_hon_disp_range_cfg_mm
uint16 radar_down_disp_range_cfg_mm
uint16 radar_up_disp_range_cfg_mm
uint8 large_atti_no_oa
uint16 oa_status_top_bar
float32 yaw
float32 pitch
float32 roll
int32 radar_graph_0_
int32 radar_graph_1_
int32 radar_graph_2_
int32 radar_graph_3_
uint16 tof_radar_graph_data_mm_0_
uint16 tof_radar_graph_data_mm_1_
uint16 tof_radar_graph_data_mm_2_
uint16 tof_radar_graph_data_mm_3_
uint8 img_sts_ok_0_
uint8 img_sts_ok_1_
uint8 img_sts_ok_2_
uint8 img_sts_ok_3_
uint8 img_sts_ok_4_
uint8 img_sts_ok_5_
uint8 abnormal_dark_0_
uint8 abnormal_dark_1_
uint8 abnormal_dark_2_
uint8 abnormal_dark_3_
uint8 abnormal_dark_4_
uint8 abnormal_dark_5_
uint8 abnormal_bright_0_
uint8 abnormal_bright_1_
uint8 abnormal_bright_2_
uint8 abnormal_bright_3_
uint8 abnormal_bright_4_
uint8 abnormal_bright_5_
uint8 abnormal_similarity_0_
uint8 abnormal_similarity_1_
uint8 abnormal_similarity_2_
uint8 abnormal_similarity_3_
uint8 abnormal_similarity_4_
uint8 abnormal_similarity_5_

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','stereo_image_status_0_','stereo_image_status_1_','stereo_image_status_2_','stereo_image_status_3_','stereo_image_status_4_','stereo_image_status_5_','motor_active','in_air','fc_ctrl_mode','wm232_front_flag','tof_ground_filter_flag_0_','tof_ground_filter_flag_1_','tof_ground_filter_flag_2_','tof_ground_filter_flag_3_','tof_ground_filter_flag_4_','tof_ground_filter_flag_5_','radar_up_output_mm','radar_down_output_mm','radar_hon_disp_range_cfg_mm','radar_down_disp_range_cfg_mm','radar_up_disp_range_cfg_mm','large_atti_no_oa','oa_status_top_bar','yaw','pitch','roll','radar_graph_0_','radar_graph_1_','radar_graph_2_','radar_graph_3_','tof_radar_graph_data_mm_0_','tof_radar_graph_data_mm_1_','tof_radar_graph_data_mm_2_','tof_radar_graph_data_mm_3_','img_sts_ok_0_','img_sts_ok_1_','img_sts_ok_2_','img_sts_ok_3_','img_sts_ok_4_','img_sts_ok_5_','abnormal_dark_0_','abnormal_dark_1_','abnormal_dark_2_','abnormal_dark_3_','abnormal_dark_4_','abnormal_dark_5_','abnormal_bright_0_','abnormal_bright_1_','abnormal_bright_2_','abnormal_bright_3_','abnormal_bright_4_','abnormal_bright_5_','abnormal_similarity_0_','abnormal_similarity_1_','abnormal_similarity_2_','abnormal_similarity_3_','abnormal_similarity_4_','abnormal_similarity_5_']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint16','uint16','uint16','uint16','uint16','uint8','uint16','float32','float32','float32','int32','int32','int32','int32','uint16','uint16','uint16','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,stereo_image_status_0_,stereo_image_status_1_,stereo_image_status_2_,stereo_image_status_3_,stereo_image_status_4_,stereo_image_status_5_,motor_active,in_air,fc_ctrl_mode,wm232_front_flag,tof_ground_filter_flag_0_,tof_ground_filter_flag_1_,tof_ground_filter_flag_2_,tof_ground_filter_flag_3_,tof_ground_filter_flag_4_,tof_ground_filter_flag_5_,radar_up_output_mm,radar_down_output_mm,radar_hon_disp_range_cfg_mm,radar_down_disp_range_cfg_mm,radar_up_disp_range_cfg_mm,large_atti_no_oa,oa_status_top_bar,yaw,pitch,roll,radar_graph_0_,radar_graph_1_,radar_graph_2_,radar_graph_3_,tof_radar_graph_data_mm_0_,tof_radar_graph_data_mm_1_,tof_radar_graph_data_mm_2_,tof_radar_graph_data_mm_3_,img_sts_ok_0_,img_sts_ok_1_,img_sts_ok_2_,img_sts_ok_3_,img_sts_ok_4_,img_sts_ok_5_,abnormal_dark_0_,abnormal_dark_1_,abnormal_dark_2_,abnormal_dark_3_,abnormal_dark_4_,abnormal_dark_5_,abnormal_bright_0_,abnormal_bright_1_,abnormal_bright_2_,abnormal_bright_3_,abnormal_bright_4_,abnormal_bright_5_,abnormal_similarity_0_,abnormal_similarity_1_,abnormal_similarity_2_,abnormal_similarity_3_,abnormal_similarity_4_,abnormal_similarity_5_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(oa_manager_debug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.stereo_image_status_0_ is None:
        self.stereo_image_status_0_ = 0
      if self.stereo_image_status_1_ is None:
        self.stereo_image_status_1_ = 0
      if self.stereo_image_status_2_ is None:
        self.stereo_image_status_2_ = 0
      if self.stereo_image_status_3_ is None:
        self.stereo_image_status_3_ = 0
      if self.stereo_image_status_4_ is None:
        self.stereo_image_status_4_ = 0
      if self.stereo_image_status_5_ is None:
        self.stereo_image_status_5_ = 0
      if self.motor_active is None:
        self.motor_active = 0
      if self.in_air is None:
        self.in_air = 0
      if self.fc_ctrl_mode is None:
        self.fc_ctrl_mode = 0
      if self.wm232_front_flag is None:
        self.wm232_front_flag = 0
      if self.tof_ground_filter_flag_0_ is None:
        self.tof_ground_filter_flag_0_ = 0
      if self.tof_ground_filter_flag_1_ is None:
        self.tof_ground_filter_flag_1_ = 0
      if self.tof_ground_filter_flag_2_ is None:
        self.tof_ground_filter_flag_2_ = 0
      if self.tof_ground_filter_flag_3_ is None:
        self.tof_ground_filter_flag_3_ = 0
      if self.tof_ground_filter_flag_4_ is None:
        self.tof_ground_filter_flag_4_ = 0
      if self.tof_ground_filter_flag_5_ is None:
        self.tof_ground_filter_flag_5_ = 0
      if self.radar_up_output_mm is None:
        self.radar_up_output_mm = 0
      if self.radar_down_output_mm is None:
        self.radar_down_output_mm = 0
      if self.radar_hon_disp_range_cfg_mm is None:
        self.radar_hon_disp_range_cfg_mm = 0
      if self.radar_down_disp_range_cfg_mm is None:
        self.radar_down_disp_range_cfg_mm = 0
      if self.radar_up_disp_range_cfg_mm is None:
        self.radar_up_disp_range_cfg_mm = 0
      if self.large_atti_no_oa is None:
        self.large_atti_no_oa = 0
      if self.oa_status_top_bar is None:
        self.oa_status_top_bar = 0
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.radar_graph_0_ is None:
        self.radar_graph_0_ = 0
      if self.radar_graph_1_ is None:
        self.radar_graph_1_ = 0
      if self.radar_graph_2_ is None:
        self.radar_graph_2_ = 0
      if self.radar_graph_3_ is None:
        self.radar_graph_3_ = 0
      if self.tof_radar_graph_data_mm_0_ is None:
        self.tof_radar_graph_data_mm_0_ = 0
      if self.tof_radar_graph_data_mm_1_ is None:
        self.tof_radar_graph_data_mm_1_ = 0
      if self.tof_radar_graph_data_mm_2_ is None:
        self.tof_radar_graph_data_mm_2_ = 0
      if self.tof_radar_graph_data_mm_3_ is None:
        self.tof_radar_graph_data_mm_3_ = 0
      if self.img_sts_ok_0_ is None:
        self.img_sts_ok_0_ = 0
      if self.img_sts_ok_1_ is None:
        self.img_sts_ok_1_ = 0
      if self.img_sts_ok_2_ is None:
        self.img_sts_ok_2_ = 0
      if self.img_sts_ok_3_ is None:
        self.img_sts_ok_3_ = 0
      if self.img_sts_ok_4_ is None:
        self.img_sts_ok_4_ = 0
      if self.img_sts_ok_5_ is None:
        self.img_sts_ok_5_ = 0
      if self.abnormal_dark_0_ is None:
        self.abnormal_dark_0_ = 0
      if self.abnormal_dark_1_ is None:
        self.abnormal_dark_1_ = 0
      if self.abnormal_dark_2_ is None:
        self.abnormal_dark_2_ = 0
      if self.abnormal_dark_3_ is None:
        self.abnormal_dark_3_ = 0
      if self.abnormal_dark_4_ is None:
        self.abnormal_dark_4_ = 0
      if self.abnormal_dark_5_ is None:
        self.abnormal_dark_5_ = 0
      if self.abnormal_bright_0_ is None:
        self.abnormal_bright_0_ = 0
      if self.abnormal_bright_1_ is None:
        self.abnormal_bright_1_ = 0
      if self.abnormal_bright_2_ is None:
        self.abnormal_bright_2_ = 0
      if self.abnormal_bright_3_ is None:
        self.abnormal_bright_3_ = 0
      if self.abnormal_bright_4_ is None:
        self.abnormal_bright_4_ = 0
      if self.abnormal_bright_5_ is None:
        self.abnormal_bright_5_ = 0
      if self.abnormal_similarity_0_ is None:
        self.abnormal_similarity_0_ = 0
      if self.abnormal_similarity_1_ is None:
        self.abnormal_similarity_1_ = 0
      if self.abnormal_similarity_2_ is None:
        self.abnormal_similarity_2_ = 0
      if self.abnormal_similarity_3_ is None:
        self.abnormal_similarity_3_ = 0
      if self.abnormal_similarity_4_ is None:
        self.abnormal_similarity_4_ = 0
      if self.abnormal_similarity_5_ is None:
        self.abnormal_similarity_5_ = 0
    else:
      self.header = std_msgs.msg.Header()
      self.stereo_image_status_0_ = 0
      self.stereo_image_status_1_ = 0
      self.stereo_image_status_2_ = 0
      self.stereo_image_status_3_ = 0
      self.stereo_image_status_4_ = 0
      self.stereo_image_status_5_ = 0
      self.motor_active = 0
      self.in_air = 0
      self.fc_ctrl_mode = 0
      self.wm232_front_flag = 0
      self.tof_ground_filter_flag_0_ = 0
      self.tof_ground_filter_flag_1_ = 0
      self.tof_ground_filter_flag_2_ = 0
      self.tof_ground_filter_flag_3_ = 0
      self.tof_ground_filter_flag_4_ = 0
      self.tof_ground_filter_flag_5_ = 0
      self.radar_up_output_mm = 0
      self.radar_down_output_mm = 0
      self.radar_hon_disp_range_cfg_mm = 0
      self.radar_down_disp_range_cfg_mm = 0
      self.radar_up_disp_range_cfg_mm = 0
      self.large_atti_no_oa = 0
      self.oa_status_top_bar = 0
      self.yaw = 0.
      self.pitch = 0.
      self.roll = 0.
      self.radar_graph_0_ = 0
      self.radar_graph_1_ = 0
      self.radar_graph_2_ = 0
      self.radar_graph_3_ = 0
      self.tof_radar_graph_data_mm_0_ = 0
      self.tof_radar_graph_data_mm_1_ = 0
      self.tof_radar_graph_data_mm_2_ = 0
      self.tof_radar_graph_data_mm_3_ = 0
      self.img_sts_ok_0_ = 0
      self.img_sts_ok_1_ = 0
      self.img_sts_ok_2_ = 0
      self.img_sts_ok_3_ = 0
      self.img_sts_ok_4_ = 0
      self.img_sts_ok_5_ = 0
      self.abnormal_dark_0_ = 0
      self.abnormal_dark_1_ = 0
      self.abnormal_dark_2_ = 0
      self.abnormal_dark_3_ = 0
      self.abnormal_dark_4_ = 0
      self.abnormal_dark_5_ = 0
      self.abnormal_bright_0_ = 0
      self.abnormal_bright_1_ = 0
      self.abnormal_bright_2_ = 0
      self.abnormal_bright_3_ = 0
      self.abnormal_bright_4_ = 0
      self.abnormal_bright_5_ = 0
      self.abnormal_similarity_0_ = 0
      self.abnormal_similarity_1_ = 0
      self.abnormal_similarity_2_ = 0
      self.abnormal_similarity_3_ = 0
      self.abnormal_similarity_4_ = 0
      self.abnormal_similarity_5_ = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16B5HBH3f4i4H24B().pack(_x.stereo_image_status_0_, _x.stereo_image_status_1_, _x.stereo_image_status_2_, _x.stereo_image_status_3_, _x.stereo_image_status_4_, _x.stereo_image_status_5_, _x.motor_active, _x.in_air, _x.fc_ctrl_mode, _x.wm232_front_flag, _x.tof_ground_filter_flag_0_, _x.tof_ground_filter_flag_1_, _x.tof_ground_filter_flag_2_, _x.tof_ground_filter_flag_3_, _x.tof_ground_filter_flag_4_, _x.tof_ground_filter_flag_5_, _x.radar_up_output_mm, _x.radar_down_output_mm, _x.radar_hon_disp_range_cfg_mm, _x.radar_down_disp_range_cfg_mm, _x.radar_up_disp_range_cfg_mm, _x.large_atti_no_oa, _x.oa_status_top_bar, _x.yaw, _x.pitch, _x.roll, _x.radar_graph_0_, _x.radar_graph_1_, _x.radar_graph_2_, _x.radar_graph_3_, _x.tof_radar_graph_data_mm_0_, _x.tof_radar_graph_data_mm_1_, _x.tof_radar_graph_data_mm_2_, _x.tof_radar_graph_data_mm_3_, _x.img_sts_ok_0_, _x.img_sts_ok_1_, _x.img_sts_ok_2_, _x.img_sts_ok_3_, _x.img_sts_ok_4_, _x.img_sts_ok_5_, _x.abnormal_dark_0_, _x.abnormal_dark_1_, _x.abnormal_dark_2_, _x.abnormal_dark_3_, _x.abnormal_dark_4_, _x.abnormal_dark_5_, _x.abnormal_bright_0_, _x.abnormal_bright_1_, _x.abnormal_bright_2_, _x.abnormal_bright_3_, _x.abnormal_bright_4_, _x.abnormal_bright_5_, _x.abnormal_similarity_0_, _x.abnormal_similarity_1_, _x.abnormal_similarity_2_, _x.abnormal_similarity_3_, _x.abnormal_similarity_4_, _x.abnormal_similarity_5_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 89
      (_x.stereo_image_status_0_, _x.stereo_image_status_1_, _x.stereo_image_status_2_, _x.stereo_image_status_3_, _x.stereo_image_status_4_, _x.stereo_image_status_5_, _x.motor_active, _x.in_air, _x.fc_ctrl_mode, _x.wm232_front_flag, _x.tof_ground_filter_flag_0_, _x.tof_ground_filter_flag_1_, _x.tof_ground_filter_flag_2_, _x.tof_ground_filter_flag_3_, _x.tof_ground_filter_flag_4_, _x.tof_ground_filter_flag_5_, _x.radar_up_output_mm, _x.radar_down_output_mm, _x.radar_hon_disp_range_cfg_mm, _x.radar_down_disp_range_cfg_mm, _x.radar_up_disp_range_cfg_mm, _x.large_atti_no_oa, _x.oa_status_top_bar, _x.yaw, _x.pitch, _x.roll, _x.radar_graph_0_, _x.radar_graph_1_, _x.radar_graph_2_, _x.radar_graph_3_, _x.tof_radar_graph_data_mm_0_, _x.tof_radar_graph_data_mm_1_, _x.tof_radar_graph_data_mm_2_, _x.tof_radar_graph_data_mm_3_, _x.img_sts_ok_0_, _x.img_sts_ok_1_, _x.img_sts_ok_2_, _x.img_sts_ok_3_, _x.img_sts_ok_4_, _x.img_sts_ok_5_, _x.abnormal_dark_0_, _x.abnormal_dark_1_, _x.abnormal_dark_2_, _x.abnormal_dark_3_, _x.abnormal_dark_4_, _x.abnormal_dark_5_, _x.abnormal_bright_0_, _x.abnormal_bright_1_, _x.abnormal_bright_2_, _x.abnormal_bright_3_, _x.abnormal_bright_4_, _x.abnormal_bright_5_, _x.abnormal_similarity_0_, _x.abnormal_similarity_1_, _x.abnormal_similarity_2_, _x.abnormal_similarity_3_, _x.abnormal_similarity_4_, _x.abnormal_similarity_5_,) = _get_struct_16B5HBH3f4i4H24B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16B5HBH3f4i4H24B().pack(_x.stereo_image_status_0_, _x.stereo_image_status_1_, _x.stereo_image_status_2_, _x.stereo_image_status_3_, _x.stereo_image_status_4_, _x.stereo_image_status_5_, _x.motor_active, _x.in_air, _x.fc_ctrl_mode, _x.wm232_front_flag, _x.tof_ground_filter_flag_0_, _x.tof_ground_filter_flag_1_, _x.tof_ground_filter_flag_2_, _x.tof_ground_filter_flag_3_, _x.tof_ground_filter_flag_4_, _x.tof_ground_filter_flag_5_, _x.radar_up_output_mm, _x.radar_down_output_mm, _x.radar_hon_disp_range_cfg_mm, _x.radar_down_disp_range_cfg_mm, _x.radar_up_disp_range_cfg_mm, _x.large_atti_no_oa, _x.oa_status_top_bar, _x.yaw, _x.pitch, _x.roll, _x.radar_graph_0_, _x.radar_graph_1_, _x.radar_graph_2_, _x.radar_graph_3_, _x.tof_radar_graph_data_mm_0_, _x.tof_radar_graph_data_mm_1_, _x.tof_radar_graph_data_mm_2_, _x.tof_radar_graph_data_mm_3_, _x.img_sts_ok_0_, _x.img_sts_ok_1_, _x.img_sts_ok_2_, _x.img_sts_ok_3_, _x.img_sts_ok_4_, _x.img_sts_ok_5_, _x.abnormal_dark_0_, _x.abnormal_dark_1_, _x.abnormal_dark_2_, _x.abnormal_dark_3_, _x.abnormal_dark_4_, _x.abnormal_dark_5_, _x.abnormal_bright_0_, _x.abnormal_bright_1_, _x.abnormal_bright_2_, _x.abnormal_bright_3_, _x.abnormal_bright_4_, _x.abnormal_bright_5_, _x.abnormal_similarity_0_, _x.abnormal_similarity_1_, _x.abnormal_similarity_2_, _x.abnormal_similarity_3_, _x.abnormal_similarity_4_, _x.abnormal_similarity_5_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 89
      (_x.stereo_image_status_0_, _x.stereo_image_status_1_, _x.stereo_image_status_2_, _x.stereo_image_status_3_, _x.stereo_image_status_4_, _x.stereo_image_status_5_, _x.motor_active, _x.in_air, _x.fc_ctrl_mode, _x.wm232_front_flag, _x.tof_ground_filter_flag_0_, _x.tof_ground_filter_flag_1_, _x.tof_ground_filter_flag_2_, _x.tof_ground_filter_flag_3_, _x.tof_ground_filter_flag_4_, _x.tof_ground_filter_flag_5_, _x.radar_up_output_mm, _x.radar_down_output_mm, _x.radar_hon_disp_range_cfg_mm, _x.radar_down_disp_range_cfg_mm, _x.radar_up_disp_range_cfg_mm, _x.large_atti_no_oa, _x.oa_status_top_bar, _x.yaw, _x.pitch, _x.roll, _x.radar_graph_0_, _x.radar_graph_1_, _x.radar_graph_2_, _x.radar_graph_3_, _x.tof_radar_graph_data_mm_0_, _x.tof_radar_graph_data_mm_1_, _x.tof_radar_graph_data_mm_2_, _x.tof_radar_graph_data_mm_3_, _x.img_sts_ok_0_, _x.img_sts_ok_1_, _x.img_sts_ok_2_, _x.img_sts_ok_3_, _x.img_sts_ok_4_, _x.img_sts_ok_5_, _x.abnormal_dark_0_, _x.abnormal_dark_1_, _x.abnormal_dark_2_, _x.abnormal_dark_3_, _x.abnormal_dark_4_, _x.abnormal_dark_5_, _x.abnormal_bright_0_, _x.abnormal_bright_1_, _x.abnormal_bright_2_, _x.abnormal_bright_3_, _x.abnormal_bright_4_, _x.abnormal_bright_5_, _x.abnormal_similarity_0_, _x.abnormal_similarity_1_, _x.abnormal_similarity_2_, _x.abnormal_similarity_3_, _x.abnormal_similarity_4_, _x.abnormal_similarity_5_,) = _get_struct_16B5HBH3f4i4H24B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B5HBH3f4i4H24B = None
def _get_struct_16B5HBH3f4i4H24B():
    global _struct_16B5HBH3f4i4H24B
    if _struct_16B5HBH3f4i4H24B is None:
        _struct_16B5HBH3f4i4H24B = struct.Struct("<16B5HBH3f4i4H24B")
    return _struct_16B5HBH3f4i4H24B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
