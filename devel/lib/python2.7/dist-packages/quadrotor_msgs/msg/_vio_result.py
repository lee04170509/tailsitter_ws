# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/vio_result.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class vio_result(genpy.Message):
  _md5sum = "324b3402a89081d3fe2b8181d4ced579"
  _type = "quadrotor_msgs/vio_result"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint32 pose_id
uint32 time_stamp_ms
uint8 flag
geometry_msgs/Vector3 p_wi
geometry_msgs/Vector3 v_wi
geometry_msgs/Quaternion q_wi
geometry_msgs/Quaternion[6] q_ic
geometry_msgs/Vector3[6] p_ic
float32 vps_from_vio

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','pose_id','time_stamp_ms','flag','p_wi','v_wi','q_wi','q_ic','p_ic','vps_from_vio']
  _slot_types = ['std_msgs/Header','uint32','uint32','uint8','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Quaternion','geometry_msgs/Quaternion[6]','geometry_msgs/Vector3[6]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pose_id,time_stamp_ms,flag,p_wi,v_wi,q_wi,q_ic,p_ic,vps_from_vio

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vio_result, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose_id is None:
        self.pose_id = 0
      if self.time_stamp_ms is None:
        self.time_stamp_ms = 0
      if self.flag is None:
        self.flag = 0
      if self.p_wi is None:
        self.p_wi = geometry_msgs.msg.Vector3()
      if self.v_wi is None:
        self.v_wi = geometry_msgs.msg.Vector3()
      if self.q_wi is None:
        self.q_wi = geometry_msgs.msg.Quaternion()
      if self.q_ic is None:
        self.q_ic = [geometry_msgs.msg.Quaternion() for _ in range(6)]
      if self.p_ic is None:
        self.p_ic = [geometry_msgs.msg.Vector3() for _ in range(6)]
      if self.vps_from_vio is None:
        self.vps_from_vio = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.pose_id = 0
      self.time_stamp_ms = 0
      self.flag = 0
      self.p_wi = geometry_msgs.msg.Vector3()
      self.v_wi = geometry_msgs.msg.Vector3()
      self.q_wi = geometry_msgs.msg.Quaternion()
      self.q_ic = [geometry_msgs.msg.Quaternion() for _ in range(6)]
      self.p_ic = [geometry_msgs.msg.Vector3() for _ in range(6)]
      self.vps_from_vio = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IB10d().pack(_x.pose_id, _x.time_stamp_ms, _x.flag, _x.p_wi.x, _x.p_wi.y, _x.p_wi.z, _x.v_wi.x, _x.v_wi.y, _x.v_wi.z, _x.q_wi.x, _x.q_wi.y, _x.q_wi.z, _x.q_wi.w))
      if len(self.q_ic) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.q_ic), 'self.q_ic')))
      for val1 in self.q_ic:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      if len(self.p_ic) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.p_ic), 'self.p_ic')))
      for val1 in self.p_ic:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.vps_from_vio
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.p_wi is None:
        self.p_wi = geometry_msgs.msg.Vector3()
      if self.v_wi is None:
        self.v_wi = geometry_msgs.msg.Vector3()
      if self.q_wi is None:
        self.q_wi = geometry_msgs.msg.Quaternion()
      if self.q_ic is None:
        self.q_ic = None
      if self.p_ic is None:
        self.p_ic = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 89
      (_x.pose_id, _x.time_stamp_ms, _x.flag, _x.p_wi.x, _x.p_wi.y, _x.p_wi.z, _x.v_wi.x, _x.v_wi.y, _x.v_wi.z, _x.q_wi.x, _x.q_wi.y, _x.q_wi.z, _x.q_wi.w,) = _get_struct_2IB10d().unpack(str[start:end])
      self.q_ic = []
      for i in range(0, 6):
        val1 = geometry_msgs.msg.Quaternion()
        _x = val1
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.q_ic.append(val1)
      self.p_ic = []
      for i in range(0, 6):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.p_ic.append(val1)
      start = end
      end += 4
      (self.vps_from_vio,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IB10d().pack(_x.pose_id, _x.time_stamp_ms, _x.flag, _x.p_wi.x, _x.p_wi.y, _x.p_wi.z, _x.v_wi.x, _x.v_wi.y, _x.v_wi.z, _x.q_wi.x, _x.q_wi.y, _x.q_wi.z, _x.q_wi.w))
      if len(self.q_ic) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.q_ic), 'self.q_ic')))
      for val1 in self.q_ic:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      if len(self.p_ic) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.p_ic), 'self.p_ic')))
      for val1 in self.p_ic:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.vps_from_vio
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.p_wi is None:
        self.p_wi = geometry_msgs.msg.Vector3()
      if self.v_wi is None:
        self.v_wi = geometry_msgs.msg.Vector3()
      if self.q_wi is None:
        self.q_wi = geometry_msgs.msg.Quaternion()
      if self.q_ic is None:
        self.q_ic = None
      if self.p_ic is None:
        self.p_ic = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 89
      (_x.pose_id, _x.time_stamp_ms, _x.flag, _x.p_wi.x, _x.p_wi.y, _x.p_wi.z, _x.v_wi.x, _x.v_wi.y, _x.v_wi.z, _x.q_wi.x, _x.q_wi.y, _x.q_wi.z, _x.q_wi.w,) = _get_struct_2IB10d().unpack(str[start:end])
      self.q_ic = []
      for i in range(0, 6):
        val1 = geometry_msgs.msg.Quaternion()
        _x = val1
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.q_ic.append(val1)
      self.p_ic = []
      for i in range(0, 6):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.p_ic.append(val1)
      start = end
      end += 4
      (self.vps_from_vio,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IB10d = None
def _get_struct_2IB10d():
    global _struct_2IB10d
    if _struct_2IB10d is None:
        _struct_2IB10d = struct.Struct("<2IB10d")
    return _struct_2IB10d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
