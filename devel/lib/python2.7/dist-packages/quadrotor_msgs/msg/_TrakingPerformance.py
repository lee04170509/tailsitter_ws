# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/TrakingPerformance.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import quadrotor_msgs.msg
import std_msgs.msg

class TrakingPerformance(genpy.Message):
  _md5sum = "91224dc465a6f21d706763bf5df5f87e"
  _type = "quadrotor_msgs/TrakingPerformance"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Header
std_msgs/Header header
# MPC finite state machine state
std_msgs/Int64 fsm_state
# Solving time consuming
float64 mpc_solve_time

QuadrotorState desire
QuadrotorState feedback
QuadrotorState error



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/Int64
int64 data
================================================================================
MSG: quadrotor_msgs/QuadrotorState
float64 thrust
float64 velocity_norm
float64 acceleration_norm
float64 jerk_norm
geometry_msgs/Point position
geometry_msgs/Vector3 velocity
geometry_msgs/Vector3 acceleration
geometry_msgs/Vector3 jerk
geometry_msgs/Vector3 snap
geometry_msgs/Vector3 attitude
geometry_msgs/Vector3 angular_velocity


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','fsm_state','mpc_solve_time','desire','feedback','error']
  _slot_types = ['std_msgs/Header','std_msgs/Int64','float64','quadrotor_msgs/QuadrotorState','quadrotor_msgs/QuadrotorState','quadrotor_msgs/QuadrotorState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fsm_state,mpc_solve_time,desire,feedback,error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrakingPerformance, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fsm_state is None:
        self.fsm_state = std_msgs.msg.Int64()
      if self.mpc_solve_time is None:
        self.mpc_solve_time = 0.
      if self.desire is None:
        self.desire = quadrotor_msgs.msg.QuadrotorState()
      if self.feedback is None:
        self.feedback = quadrotor_msgs.msg.QuadrotorState()
      if self.error is None:
        self.error = quadrotor_msgs.msg.QuadrotorState()
    else:
      self.header = std_msgs.msg.Header()
      self.fsm_state = std_msgs.msg.Int64()
      self.mpc_solve_time = 0.
      self.desire = quadrotor_msgs.msg.QuadrotorState()
      self.feedback = quadrotor_msgs.msg.QuadrotorState()
      self.error = quadrotor_msgs.msg.QuadrotorState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q76d().pack(_x.fsm_state.data, _x.mpc_solve_time, _x.desire.thrust, _x.desire.velocity_norm, _x.desire.acceleration_norm, _x.desire.jerk_norm, _x.desire.position.x, _x.desire.position.y, _x.desire.position.z, _x.desire.velocity.x, _x.desire.velocity.y, _x.desire.velocity.z, _x.desire.acceleration.x, _x.desire.acceleration.y, _x.desire.acceleration.z, _x.desire.jerk.x, _x.desire.jerk.y, _x.desire.jerk.z, _x.desire.snap.x, _x.desire.snap.y, _x.desire.snap.z, _x.desire.attitude.x, _x.desire.attitude.y, _x.desire.attitude.z, _x.desire.angular_velocity.x, _x.desire.angular_velocity.y, _x.desire.angular_velocity.z, _x.feedback.thrust, _x.feedback.velocity_norm, _x.feedback.acceleration_norm, _x.feedback.jerk_norm, _x.feedback.position.x, _x.feedback.position.y, _x.feedback.position.z, _x.feedback.velocity.x, _x.feedback.velocity.y, _x.feedback.velocity.z, _x.feedback.acceleration.x, _x.feedback.acceleration.y, _x.feedback.acceleration.z, _x.feedback.jerk.x, _x.feedback.jerk.y, _x.feedback.jerk.z, _x.feedback.snap.x, _x.feedback.snap.y, _x.feedback.snap.z, _x.feedback.attitude.x, _x.feedback.attitude.y, _x.feedback.attitude.z, _x.feedback.angular_velocity.x, _x.feedback.angular_velocity.y, _x.feedback.angular_velocity.z, _x.error.thrust, _x.error.velocity_norm, _x.error.acceleration_norm, _x.error.jerk_norm, _x.error.position.x, _x.error.position.y, _x.error.position.z, _x.error.velocity.x, _x.error.velocity.y, _x.error.velocity.z, _x.error.acceleration.x, _x.error.acceleration.y, _x.error.acceleration.z, _x.error.jerk.x, _x.error.jerk.y, _x.error.jerk.z, _x.error.snap.x, _x.error.snap.y, _x.error.snap.z, _x.error.attitude.x, _x.error.attitude.y, _x.error.attitude.z, _x.error.angular_velocity.x, _x.error.angular_velocity.y, _x.error.angular_velocity.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fsm_state is None:
        self.fsm_state = std_msgs.msg.Int64()
      if self.desire is None:
        self.desire = quadrotor_msgs.msg.QuadrotorState()
      if self.feedback is None:
        self.feedback = quadrotor_msgs.msg.QuadrotorState()
      if self.error is None:
        self.error = quadrotor_msgs.msg.QuadrotorState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 616
      (_x.fsm_state.data, _x.mpc_solve_time, _x.desire.thrust, _x.desire.velocity_norm, _x.desire.acceleration_norm, _x.desire.jerk_norm, _x.desire.position.x, _x.desire.position.y, _x.desire.position.z, _x.desire.velocity.x, _x.desire.velocity.y, _x.desire.velocity.z, _x.desire.acceleration.x, _x.desire.acceleration.y, _x.desire.acceleration.z, _x.desire.jerk.x, _x.desire.jerk.y, _x.desire.jerk.z, _x.desire.snap.x, _x.desire.snap.y, _x.desire.snap.z, _x.desire.attitude.x, _x.desire.attitude.y, _x.desire.attitude.z, _x.desire.angular_velocity.x, _x.desire.angular_velocity.y, _x.desire.angular_velocity.z, _x.feedback.thrust, _x.feedback.velocity_norm, _x.feedback.acceleration_norm, _x.feedback.jerk_norm, _x.feedback.position.x, _x.feedback.position.y, _x.feedback.position.z, _x.feedback.velocity.x, _x.feedback.velocity.y, _x.feedback.velocity.z, _x.feedback.acceleration.x, _x.feedback.acceleration.y, _x.feedback.acceleration.z, _x.feedback.jerk.x, _x.feedback.jerk.y, _x.feedback.jerk.z, _x.feedback.snap.x, _x.feedback.snap.y, _x.feedback.snap.z, _x.feedback.attitude.x, _x.feedback.attitude.y, _x.feedback.attitude.z, _x.feedback.angular_velocity.x, _x.feedback.angular_velocity.y, _x.feedback.angular_velocity.z, _x.error.thrust, _x.error.velocity_norm, _x.error.acceleration_norm, _x.error.jerk_norm, _x.error.position.x, _x.error.position.y, _x.error.position.z, _x.error.velocity.x, _x.error.velocity.y, _x.error.velocity.z, _x.error.acceleration.x, _x.error.acceleration.y, _x.error.acceleration.z, _x.error.jerk.x, _x.error.jerk.y, _x.error.jerk.z, _x.error.snap.x, _x.error.snap.y, _x.error.snap.z, _x.error.attitude.x, _x.error.attitude.y, _x.error.attitude.z, _x.error.angular_velocity.x, _x.error.angular_velocity.y, _x.error.angular_velocity.z,) = _get_struct_q76d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q76d().pack(_x.fsm_state.data, _x.mpc_solve_time, _x.desire.thrust, _x.desire.velocity_norm, _x.desire.acceleration_norm, _x.desire.jerk_norm, _x.desire.position.x, _x.desire.position.y, _x.desire.position.z, _x.desire.velocity.x, _x.desire.velocity.y, _x.desire.velocity.z, _x.desire.acceleration.x, _x.desire.acceleration.y, _x.desire.acceleration.z, _x.desire.jerk.x, _x.desire.jerk.y, _x.desire.jerk.z, _x.desire.snap.x, _x.desire.snap.y, _x.desire.snap.z, _x.desire.attitude.x, _x.desire.attitude.y, _x.desire.attitude.z, _x.desire.angular_velocity.x, _x.desire.angular_velocity.y, _x.desire.angular_velocity.z, _x.feedback.thrust, _x.feedback.velocity_norm, _x.feedback.acceleration_norm, _x.feedback.jerk_norm, _x.feedback.position.x, _x.feedback.position.y, _x.feedback.position.z, _x.feedback.velocity.x, _x.feedback.velocity.y, _x.feedback.velocity.z, _x.feedback.acceleration.x, _x.feedback.acceleration.y, _x.feedback.acceleration.z, _x.feedback.jerk.x, _x.feedback.jerk.y, _x.feedback.jerk.z, _x.feedback.snap.x, _x.feedback.snap.y, _x.feedback.snap.z, _x.feedback.attitude.x, _x.feedback.attitude.y, _x.feedback.attitude.z, _x.feedback.angular_velocity.x, _x.feedback.angular_velocity.y, _x.feedback.angular_velocity.z, _x.error.thrust, _x.error.velocity_norm, _x.error.acceleration_norm, _x.error.jerk_norm, _x.error.position.x, _x.error.position.y, _x.error.position.z, _x.error.velocity.x, _x.error.velocity.y, _x.error.velocity.z, _x.error.acceleration.x, _x.error.acceleration.y, _x.error.acceleration.z, _x.error.jerk.x, _x.error.jerk.y, _x.error.jerk.z, _x.error.snap.x, _x.error.snap.y, _x.error.snap.z, _x.error.attitude.x, _x.error.attitude.y, _x.error.attitude.z, _x.error.angular_velocity.x, _x.error.angular_velocity.y, _x.error.angular_velocity.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fsm_state is None:
        self.fsm_state = std_msgs.msg.Int64()
      if self.desire is None:
        self.desire = quadrotor_msgs.msg.QuadrotorState()
      if self.feedback is None:
        self.feedback = quadrotor_msgs.msg.QuadrotorState()
      if self.error is None:
        self.error = quadrotor_msgs.msg.QuadrotorState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 616
      (_x.fsm_state.data, _x.mpc_solve_time, _x.desire.thrust, _x.desire.velocity_norm, _x.desire.acceleration_norm, _x.desire.jerk_norm, _x.desire.position.x, _x.desire.position.y, _x.desire.position.z, _x.desire.velocity.x, _x.desire.velocity.y, _x.desire.velocity.z, _x.desire.acceleration.x, _x.desire.acceleration.y, _x.desire.acceleration.z, _x.desire.jerk.x, _x.desire.jerk.y, _x.desire.jerk.z, _x.desire.snap.x, _x.desire.snap.y, _x.desire.snap.z, _x.desire.attitude.x, _x.desire.attitude.y, _x.desire.attitude.z, _x.desire.angular_velocity.x, _x.desire.angular_velocity.y, _x.desire.angular_velocity.z, _x.feedback.thrust, _x.feedback.velocity_norm, _x.feedback.acceleration_norm, _x.feedback.jerk_norm, _x.feedback.position.x, _x.feedback.position.y, _x.feedback.position.z, _x.feedback.velocity.x, _x.feedback.velocity.y, _x.feedback.velocity.z, _x.feedback.acceleration.x, _x.feedback.acceleration.y, _x.feedback.acceleration.z, _x.feedback.jerk.x, _x.feedback.jerk.y, _x.feedback.jerk.z, _x.feedback.snap.x, _x.feedback.snap.y, _x.feedback.snap.z, _x.feedback.attitude.x, _x.feedback.attitude.y, _x.feedback.attitude.z, _x.feedback.angular_velocity.x, _x.feedback.angular_velocity.y, _x.feedback.angular_velocity.z, _x.error.thrust, _x.error.velocity_norm, _x.error.acceleration_norm, _x.error.jerk_norm, _x.error.position.x, _x.error.position.y, _x.error.position.z, _x.error.velocity.x, _x.error.velocity.y, _x.error.velocity.z, _x.error.acceleration.x, _x.error.acceleration.y, _x.error.acceleration.z, _x.error.jerk.x, _x.error.jerk.y, _x.error.jerk.z, _x.error.snap.x, _x.error.snap.y, _x.error.snap.z, _x.error.attitude.x, _x.error.attitude.y, _x.error.attitude.z, _x.error.angular_velocity.x, _x.error.angular_velocity.y, _x.error.angular_velocity.z,) = _get_struct_q76d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_q76d = None
def _get_struct_q76d():
    global _struct_q76d
    if _struct_q76d is None:
        _struct_q76d = struct.Struct("<q76d")
    return _struct_q76d
