# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/QuadrotorState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class QuadrotorState(genpy.Message):
  _md5sum = "9f6239376b083d84c39413d50a0b4367"
  _type = "quadrotor_msgs/QuadrotorState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 thrust
float64 velocity_norm
float64 acceleration_norm
float64 jerk_norm
geometry_msgs/Point position
geometry_msgs/Vector3 velocity
geometry_msgs/Vector3 acceleration
geometry_msgs/Vector3 jerk
geometry_msgs/Vector3 snap
geometry_msgs/Vector3 attitude
geometry_msgs/Vector3 angular_velocity


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['thrust','velocity_norm','acceleration_norm','jerk_norm','position','velocity','acceleration','jerk','snap','attitude','angular_velocity']
  _slot_types = ['float64','float64','float64','float64','geometry_msgs/Point','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       thrust,velocity_norm,acceleration_norm,jerk_norm,position,velocity,acceleration,jerk,snap,attitude,angular_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QuadrotorState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.thrust is None:
        self.thrust = 0.
      if self.velocity_norm is None:
        self.velocity_norm = 0.
      if self.acceleration_norm is None:
        self.acceleration_norm = 0.
      if self.jerk_norm is None:
        self.jerk_norm = 0.
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Vector3()
      if self.snap is None:
        self.snap = geometry_msgs.msg.Vector3()
      if self.attitude is None:
        self.attitude = geometry_msgs.msg.Vector3()
      if self.angular_velocity is None:
        self.angular_velocity = geometry_msgs.msg.Vector3()
    else:
      self.thrust = 0.
      self.velocity_norm = 0.
      self.acceleration_norm = 0.
      self.jerk_norm = 0.
      self.position = geometry_msgs.msg.Point()
      self.velocity = geometry_msgs.msg.Vector3()
      self.acceleration = geometry_msgs.msg.Vector3()
      self.jerk = geometry_msgs.msg.Vector3()
      self.snap = geometry_msgs.msg.Vector3()
      self.attitude = geometry_msgs.msg.Vector3()
      self.angular_velocity = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_25d().pack(_x.thrust, _x.velocity_norm, _x.acceleration_norm, _x.jerk_norm, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.snap.x, _x.snap.y, _x.snap.z, _x.attitude.x, _x.attitude.y, _x.attitude.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Vector3()
      if self.snap is None:
        self.snap = geometry_msgs.msg.Vector3()
      if self.attitude is None:
        self.attitude = geometry_msgs.msg.Vector3()
      if self.angular_velocity is None:
        self.angular_velocity = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 200
      (_x.thrust, _x.velocity_norm, _x.acceleration_norm, _x.jerk_norm, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.snap.x, _x.snap.y, _x.snap.z, _x.attitude.x, _x.attitude.y, _x.attitude.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z,) = _get_struct_25d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_25d().pack(_x.thrust, _x.velocity_norm, _x.acceleration_norm, _x.jerk_norm, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.snap.x, _x.snap.y, _x.snap.z, _x.attitude.x, _x.attitude.y, _x.attitude.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Vector3()
      if self.snap is None:
        self.snap = geometry_msgs.msg.Vector3()
      if self.attitude is None:
        self.attitude = geometry_msgs.msg.Vector3()
      if self.angular_velocity is None:
        self.angular_velocity = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 200
      (_x.thrust, _x.velocity_norm, _x.acceleration_norm, _x.jerk_norm, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.snap.x, _x.snap.y, _x.snap.z, _x.attitude.x, _x.attitude.y, _x.attitude.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z,) = _get_struct_25d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_25d = None
def _get_struct_25d():
    global _struct_25d
    if _struct_25d is None:
        _struct_25d = struct.Struct("<25d")
    return _struct_25d
