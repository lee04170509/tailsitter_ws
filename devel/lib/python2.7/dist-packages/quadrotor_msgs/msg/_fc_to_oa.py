# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/fc_to_oa.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class fc_to_oa(genpy.Message):
  _md5sum = "f2d437dc8b62cfe7d33ce34dfc5bd422"
  _type = "quadrotor_msgs/fc_to_oa"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
float32 q0
float32 q1
float32 q2
float32 q3
float32 gyro_x
float32 gyro_y
float32 gyro_z
float32 acc_x
float32 acc_y
float32 acc_z
float32 down_dist
float32 top_dist
float32 lati
float32 longti
float32 press
float32 vg_x
float32 vg_y
float32 vg_z
int16 aileron
int16 elevator
int16 throttle
int16 rudder
uint32 fc_timestamp_ms
int16 vo_flag
float32 roll
float32 pitch
float32 yaw
float32 anti_longti
float32 anti_press

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','q0','q1','q2','q3','gyro_x','gyro_y','gyro_z','acc_x','acc_y','acc_z','down_dist','top_dist','lati','longti','press','vg_x','vg_y','vg_z','aileron','elevator','throttle','rudder','fc_timestamp_ms','vo_flag','roll','pitch','yaw','anti_longti','anti_press']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int16','int16','int16','int16','uint32','int16','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,q0,q1,q2,q3,gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z,down_dist,top_dist,lati,longti,press,vg_x,vg_y,vg_z,aileron,elevator,throttle,rudder,fc_timestamp_ms,vo_flag,roll,pitch,yaw,anti_longti,anti_press

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(fc_to_oa, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.q0 is None:
        self.q0 = 0.
      if self.q1 is None:
        self.q1 = 0.
      if self.q2 is None:
        self.q2 = 0.
      if self.q3 is None:
        self.q3 = 0.
      if self.gyro_x is None:
        self.gyro_x = 0.
      if self.gyro_y is None:
        self.gyro_y = 0.
      if self.gyro_z is None:
        self.gyro_z = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.down_dist is None:
        self.down_dist = 0.
      if self.top_dist is None:
        self.top_dist = 0.
      if self.lati is None:
        self.lati = 0.
      if self.longti is None:
        self.longti = 0.
      if self.press is None:
        self.press = 0.
      if self.vg_x is None:
        self.vg_x = 0.
      if self.vg_y is None:
        self.vg_y = 0.
      if self.vg_z is None:
        self.vg_z = 0.
      if self.aileron is None:
        self.aileron = 0
      if self.elevator is None:
        self.elevator = 0
      if self.throttle is None:
        self.throttle = 0
      if self.rudder is None:
        self.rudder = 0
      if self.fc_timestamp_ms is None:
        self.fc_timestamp_ms = 0
      if self.vo_flag is None:
        self.vo_flag = 0
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.anti_longti is None:
        self.anti_longti = 0.
      if self.anti_press is None:
        self.anti_press = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.q0 = 0.
      self.q1 = 0.
      self.q2 = 0.
      self.q3 = 0.
      self.gyro_x = 0.
      self.gyro_y = 0.
      self.gyro_z = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.down_dist = 0.
      self.top_dist = 0.
      self.lati = 0.
      self.longti = 0.
      self.press = 0.
      self.vg_x = 0.
      self.vg_y = 0.
      self.vg_z = 0.
      self.aileron = 0
      self.elevator = 0
      self.throttle = 0
      self.rudder = 0
      self.fc_timestamp_ms = 0
      self.vo_flag = 0
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.anti_longti = 0.
      self.anti_press = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_18f4hIh5f().pack(_x.q0, _x.q1, _x.q2, _x.q3, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.down_dist, _x.top_dist, _x.lati, _x.longti, _x.press, _x.vg_x, _x.vg_y, _x.vg_z, _x.aileron, _x.elevator, _x.throttle, _x.rudder, _x.fc_timestamp_ms, _x.vo_flag, _x.roll, _x.pitch, _x.yaw, _x.anti_longti, _x.anti_press))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 106
      (_x.q0, _x.q1, _x.q2, _x.q3, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.down_dist, _x.top_dist, _x.lati, _x.longti, _x.press, _x.vg_x, _x.vg_y, _x.vg_z, _x.aileron, _x.elevator, _x.throttle, _x.rudder, _x.fc_timestamp_ms, _x.vo_flag, _x.roll, _x.pitch, _x.yaw, _x.anti_longti, _x.anti_press,) = _get_struct_18f4hIh5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_18f4hIh5f().pack(_x.q0, _x.q1, _x.q2, _x.q3, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.down_dist, _x.top_dist, _x.lati, _x.longti, _x.press, _x.vg_x, _x.vg_y, _x.vg_z, _x.aileron, _x.elevator, _x.throttle, _x.rudder, _x.fc_timestamp_ms, _x.vo_flag, _x.roll, _x.pitch, _x.yaw, _x.anti_longti, _x.anti_press))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 106
      (_x.q0, _x.q1, _x.q2, _x.q3, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.down_dist, _x.top_dist, _x.lati, _x.longti, _x.press, _x.vg_x, _x.vg_y, _x.vg_z, _x.aileron, _x.elevator, _x.throttle, _x.rudder, _x.fc_timestamp_ms, _x.vo_flag, _x.roll, _x.pitch, _x.yaw, _x.anti_longti, _x.anti_press,) = _get_struct_18f4hIh5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18f4hIh5f = None
def _get_struct_18f4hIh5f():
    global _struct_18f4hIh5f
    if _struct_18f4hIh5f is None:
        _struct_18f4hIh5f = struct.Struct("<18f4hIh5f")
    return _struct_18f4hIh5f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
